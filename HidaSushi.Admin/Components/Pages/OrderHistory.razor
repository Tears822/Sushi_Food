@page "/order-history"
@using HidaSushi.Shared.Models
@using HidaSushi.Admin.Services
@inject AdminApiService ApiService
@inject IJSRuntime JSRuntime

<PageTitle>Order History - HIDA SUSHI Admin</PageTitle>

<AuthGuard>
    <!-- Order History Header -->
    <div class="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-6">
        <div class="container mx-auto">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold">📋 Order History</h1>
                    <p class="text-blue-100">View and filter past orders • Export data • Track performance</p>
                </div>
                <div class="flex items-center space-x-4">
                    <button @onclick="ExportData" 
                            class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-colors flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                        </svg>
                        Export
                    </button>
                    <button @onclick="RefreshOrders" 
                            class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-colors flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                        </svg>
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white border-b">
        <div class="container mx-auto p-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Date Range</label>
                    <input @bind="selectedDate" type="date" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Order Status</label>
                    <select @bind="selectedStatus" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">All Status</option>
                        <option value="@OrderStatus.Completed">Completed</option>
                        <option value="@OrderStatus.Cancelled">Cancelled</option>
                        <option value="@OrderStatus.InPreparation">In Preparation</option>
                        <option value="@OrderStatus.Ready">Ready</option>
                        <option value="@OrderStatus.OutForDelivery">Out for Delivery</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Order Type</label>
                    <select @bind="selectedType" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">All Types</option>
                        <option value="@OrderType.Delivery">Delivery</option>
                        <option value="@OrderType.Pickup">Pickup</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Customer</label>
                    <input @bind="customerFilter" type="text" placeholder="Search by name..." 
                           class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
            </div>
            <div class="mt-4">
                <button @onclick="ApplyFilters" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                    Apply Filters
                </button>
                <button @onclick="ClearFilters" class="ml-2 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors">
                    Clear
                </button>
            </div>
        </div>
    </div>

    <!-- Order Statistics -->
    <div class="bg-gray-50 border-b">
        <div class="container mx-auto p-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="bg-white border rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-blue-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-blue-600">Total Orders</p>
                            <p class="text-lg font-bold text-blue-900">@filteredOrders.Count</p>
                        </div>
                    </div>
                </div>
                <div class="bg-white border rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-green-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-green-600">Total Revenue</p>
                            <p class="text-lg font-bold text-green-900">€@filteredOrders.Where(o => o.Status == OrderStatus.Completed).Sum(o => o.TotalAmount).ToString("F2")</p>
                        </div>
                    </div>
                </div>
                <div class="bg-white border rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-purple-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-purple-600">Avg Order Value</p>
                            <p class="text-lg font-bold text-purple-900">€@(filteredOrders.Any() ? (filteredOrders.Average(o => (double)o.TotalAmount)).ToString("F2") : "0.00")</p>
                        </div>
                    </div>
                </div>
                <div class="bg-white border rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-amber-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-amber-600">Completion Rate</p>
                            <p class="text-lg font-bold text-amber-900">@(filteredOrders.Any() ? Math.Round((double)filteredOrders.Count(o => o.Status == OrderStatus.Completed) / filteredOrders.Count * 100, 1) : 0)%</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Orders Table -->
    <div class="container mx-auto p-6">
        @if (isLoading)
        {
            <div class="text-center py-8">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <p class="mt-2 text-gray-600">Loading order history...</p>
            </div>
        }
        else if (filteredOrders.Any())
        {
            <div class="bg-white rounded-lg shadow overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var order in filteredOrders.Take(50))
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div>
                                            <div class="text-sm font-medium text-gray-900">#@order.OrderNumber</div>
                                            <div class="text-sm text-gray-500">@order.Items.Count items</div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div>
                                            <div class="text-sm font-medium text-gray-900">@order.CustomerName</div>
                                            <div class="text-sm text-gray-500">@order.CustomerEmail</div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(order.Type == OrderType.Delivery ? "bg-blue-100 text-blue-800" : "bg-green-100 text-green-800")">
                                            @(order.Type == OrderType.Delivery ? "🚚 Delivery" : "🏪 Pickup")
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStatusBadgeClass(order.Status)">
                                            @GetStatusIcon(order.Status) @order.Status
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                        €@order.TotalAmount.ToString("F2")
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @order.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        <button @onclick="@(() => ViewOrderDetails(order))" 
                                                class="text-blue-600 hover:text-blue-900 font-medium">
                                            View Details
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                @if (filteredOrders.Count > 50)
                {
                    <div class="bg-gray-50 px-6 py-3">
                        <p class="text-sm text-gray-600">Showing first 50 of @filteredOrders.Count orders. Use filters to narrow results.</p>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 48 48">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No orders found</h3>
                <p class="mt-1 text-sm text-gray-500">Try adjusting your filters or check back later.</p>
            </div>
        }
    </div>

    <!-- Order Details Modal -->
    @if (selectedOrder != null)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" @onclick="CloseOrderDetails">
            <div class="bg-white rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto" @onclick:stopPropagation="true">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-xl font-bold">Order Details - #@selectedOrder.OrderNumber</h2>
                        <button @onclick="CloseOrderDetails" class="text-gray-400 hover:text-gray-600">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                        </button>
                    </div>

                    <div class="space-y-6">
                        <!-- Customer Info -->
                        <div>
                            <h3 class="text-lg font-medium mb-3">Customer Information</h3>
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <p><strong>Name:</strong> @selectedOrder.CustomerName</p>
                                <p><strong>Email:</strong> @selectedOrder.CustomerEmail</p>
                                <p><strong>Phone:</strong> @selectedOrder.CustomerPhone</p>
                                @if (!string.IsNullOrEmpty(selectedOrder.DeliveryAddress))
                                {
                                    <p><strong>Delivery Address:</strong> @selectedOrder.DeliveryAddress</p>
                                }
                                @if (!string.IsNullOrEmpty(selectedOrder.Notes))
                                {
                                    <p><strong>Notes:</strong> @selectedOrder.Notes</p>
                                }
                            </div>
                        </div>

                        <!-- Order Items -->
                        <div>
                            <h3 class="text-lg font-medium mb-3">Order Items</h3>
                            <div class="space-y-2">
                                @foreach (var item in selectedOrder.Items)
                                {
                                    <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
                                        <div>
                                            <p class="font-medium">@(item.SushiRoll?.Name ?? item.CustomRoll?.Name ?? "Unknown Item")</p>
                                            <p class="text-sm text-gray-600">Quantity: @item.Quantity</p>
                                        </div>
                                        <span class="font-bold">€@item.Price.ToString("F2")</span>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Order Summary -->
                        <div>
                            <div class="border-t pt-4">
                                <div class="flex justify-between items-center text-lg font-bold">
                                    <span>Total:</span>
                                    <span>€@selectedOrder.TotalAmount.ToString("F2")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</AuthGuard>

@code {
    private List<Order> allOrders = new();
    private List<Order> filteredOrders = new();
    private bool isLoading = true;
    
    private DateTime? selectedDate;
    private string? selectedStatus = "";
    private string? selectedType = "";
    private string customerFilter = "";
    
    private Order? selectedOrder;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        isLoading = true;
        try
        {
            allOrders = await ApiService.GetAllOrdersAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading orders: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshOrders()
    {
        await LoadOrders();
    }

    private void ApplyFilters()
    {
        filteredOrders = allOrders.ToList();

        if (selectedDate.HasValue)
        {
            filteredOrders = filteredOrders.Where(o => o.CreatedAt.Date == selectedDate.Value.Date).ToList();
        }

        if (!string.IsNullOrEmpty(selectedStatus) && Enum.TryParse<OrderStatus>(selectedStatus, out var status))
        {
            filteredOrders = filteredOrders.Where(o => o.Status == status).ToList();
        }

        if (!string.IsNullOrEmpty(selectedType) && Enum.TryParse<OrderType>(selectedType, out var type))
        {
            filteredOrders = filteredOrders.Where(o => o.Type == type).ToList();
        }

        if (!string.IsNullOrEmpty(customerFilter))
        {
            filteredOrders = filteredOrders.Where(o => 
                o.CustomerName.Contains(customerFilter, StringComparison.OrdinalIgnoreCase) ||
                o.CustomerEmail.Contains(customerFilter, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        filteredOrders = filteredOrders.OrderByDescending(o => o.CreatedAt).ToList();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        selectedDate = null;
        selectedStatus = "";
        selectedType = "";
        customerFilter = "";
        ApplyFilters();
    }

    private async Task ExportData()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Export functionality would be implemented here.");
    }

    private void ViewOrderDetails(Order order)
    {
        selectedOrder = order;
    }

    private void CloseOrderDetails()
    {
        selectedOrder = null;
    }

    private string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Received => "bg-yellow-100 text-yellow-800",
            OrderStatus.InPreparation => "bg-blue-100 text-blue-800",
            OrderStatus.Ready => "bg-purple-100 text-purple-800",
            OrderStatus.OutForDelivery => "bg-indigo-100 text-indigo-800",
            OrderStatus.Completed => "bg-green-100 text-green-800",
            OrderStatus.Cancelled => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetStatusIcon(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Received => "📋",
            OrderStatus.InPreparation => "👨‍🍳",
            OrderStatus.Ready => "✅",
            OrderStatus.OutForDelivery => "🚚",
            OrderStatus.Completed => "✅",
            OrderStatus.Cancelled => "❌",
            _ => "❓"
        };
    }
} 