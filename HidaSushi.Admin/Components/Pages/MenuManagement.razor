@page "/menu-management"
@using HidaSushi.Shared.Models
@using HidaSushi.Admin.Services
@inject AdminApiService ApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Menu Management - HIDA SUSHI Admin</PageTitle>

<AuthGuard>
    <!-- Header -->
    <div class="bg-gradient-to-r from-purple-600 to-amber-500 text-white p-6">
        <div class="container mx-auto">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold">üç± Menu Management</h1>
                    <p class="text-purple-100">Manage signature rolls, pricing, and availability</p>
                </div>
                <div class="flex items-center space-x-4">
                    <button @onclick="ShowCreateRollForm" 
                            class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-colors flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                        </svg>
                        Add New Roll
                    </button>
                    <button @onclick="LoadData" 
                            class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-colors flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                        </svg>
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Stats -->
    <div class="bg-white border-b">
        <div class="container mx-auto p-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-purple-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-purple-600">Total Rolls</p>
                            <p class="text-lg font-bold text-purple-900">@signatureRolls.Count</p>
                        </div>
                    </div>
                </div>
                <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-green-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-green-600">Available</p>
                            <p class="text-lg font-bold text-green-900">@signatureRolls.Count(r => r.IsAvailable)</p>
                        </div>
                    </div>
                </div>
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-blue-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-blue-600">Avg. Price</p>
                            <p class="text-lg font-bold text-blue-900">‚Ç¨@(signatureRolls.Any() ? signatureRolls.Average(r => (double)r.Price).ToString("F2") : "0.00")</p>
                        </div>
                    </div>
                </div>
                <div class="bg-amber-50 border border-amber-200 rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-amber-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-amber-600">Signature</p>
                            <p class="text-lg font-bold text-amber-900">@signatureRolls.Count(r => r.IsSignatureRoll)</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Content Area -->
    <div class="container mx-auto p-6">
        
        <!-- Signature Rolls Management -->
        <div class="mb-6">
            @if (isLoading)
            {
                <div class="text-center py-8">
                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
                    <p class="mt-2 text-gray-600">Loading menu items...</p>
                </div>
            }
            else
            {
                <!-- Rolls Grid -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    @foreach (var roll in signatureRolls)
                    {
                        <div class="bg-white border rounded-lg p-6 hover:shadow-lg transition-shadow">
                            <div class="flex justify-between items-start mb-4">
                                <h3 class="font-bold text-lg text-gray-900 leading-tight">@roll.Name</h3>
                                <div class="flex items-center space-x-2">
                                    <span class="@(roll.IsAvailable ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") px-2 py-1 rounded-full text-xs font-medium">
                                        @(roll.IsAvailable ? "Available" : "Unavailable")
                                    </span>
                                </div>
                            </div>

                            <p class="text-gray-600 text-sm mb-4 line-clamp-2">@roll.Description</p>

                            <div class="flex justify-between items-center mb-4">
                                <span class="text-2xl font-bold text-purple-600">‚Ç¨@roll.Price</span>
                                @if (roll.IsVegetarian)
                                {
                                    <span class="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs">üå± Vegetarian</span>
                                }
                                @if (roll.IsSignatureRoll)
                                {
                                    <span class="bg-purple-100 text-purple-800 px-2 py-1 rounded-full text-xs">‚≠ê Signature</span>
                                }
                            </div>

                            <!-- Ingredients -->
                            @if (roll.Ingredients?.Any() == true)
                            {
                                <div class="mb-4">
                                    <p class="text-xs font-medium text-gray-700 mb-2">Ingredients:</p>
                                    <div class="flex flex-wrap gap-1">
                                        @foreach (var ingredient in roll.Ingredients.Take(3))
                                        {
                                            <span class="bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs">@ingredient</span>
                                        }
                                        @if (roll.Ingredients.Count > 3)
                                        {
                                            <span class="text-gray-500 text-xs">+@(roll.Ingredients.Count - 3) more</span>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- Actions -->
                            <div class="flex space-x-2">
                                <button @onclick="@(() => EditRoll(roll))" 
                                        class="flex-1 bg-purple-600 text-white px-3 py-2 rounded text-sm hover:bg-purple-700 transition-colors">
                                    Edit
                                </button>
                                <button @onclick="@(() => ToggleRollAvailability(roll))" 
                                        class="flex-1 @(roll.IsAvailable ? "bg-red-600 hover:bg-red-700" : "bg-green-600 hover:bg-green-700") text-white px-3 py-2 rounded text-sm transition-colors">
                                    @(roll.IsAvailable ? "Disable" : "Enable")
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Create/Edit Roll Modal -->
    @if (showRollForm)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" @onclick="CancelRollForm">
            <div class="bg-white rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto" @onclick:stopPropagation="true">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-xl font-bold">@(editingRoll != null ? "Edit" : "Create") Signature Roll</h2>
                        <button @onclick="CancelRollForm" class="text-gray-400 hover:text-gray-600">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                        </button>
                    </div>

                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Roll Name *</label>
                            <input @bind="rollForm.Name" type="text" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500" 
                                   placeholder="e.g., Dragon Roll Supreme" required />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Description *</label>
                            <textarea @bind="rollForm.Description" rows="3" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500" 
                                      placeholder="Describe the roll, its ingredients, and what makes it special..." required></textarea>
                        </div>

                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Price (‚Ç¨) *</label>
                                <input @bind="rollForm.Price" type="number" step="0.01" min="0" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500" 
                                       placeholder="0.00" required />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Options</label>
                                <div class="space-y-2">
                                    <label class="flex items-center">
                                        <input @bind="rollForm.IsVegetarian" type="checkbox" class="rounded border-gray-300 text-purple-600 focus:ring-purple-500" />
                                        <span class="ml-2 text-sm text-gray-700">Vegetarian</span>
                                    </label>
                                    <label class="flex items-center">
                                        <input @bind="rollForm.IsSignatureRoll" type="checkbox" class="rounded border-gray-300 text-purple-600 focus:ring-purple-500" />
                                        <span class="ml-2 text-sm text-gray-700">Signature Roll</span>
                                    </label>
                                    <label class="flex items-center">
                                        <input @bind="rollForm.IsAvailable" type="checkbox" class="rounded border-gray-300 text-purple-600 focus:ring-purple-500" />
                                        <span class="ml-2 text-sm text-gray-700">Available</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex space-x-3 mt-6">
                        <button @onclick="SaveRoll" class="flex-1 bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
                            @(editingRoll != null ? "Update" : "Create") Roll
                        </button>
                        <button @onclick="CancelRollForm" class="bg-gray-400 text-white px-4 py-2 rounded-lg hover:bg-gray-500 transition-colors">
                            Cancel
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</AuthGuard>

@code {
    private bool isLoading = true;
    private bool showRollForm = false;
    
    private List<SushiRoll> signatureRolls = new();
    
    private SushiRoll rollForm = new();
    private SushiRoll? editingRoll;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            signatureRolls = await ApiService.GetMenuAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading menu data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateRollForm()
    {
        editingRoll = null;
        rollForm = new SushiRoll { IsAvailable = true };
        showRollForm = true;
    }

    private void EditRoll(SushiRoll roll)
    {
        editingRoll = roll;
        rollForm = new SushiRoll
        {
            Id = roll.Id,
            Name = roll.Name,
            Description = roll.Description,
            Price = roll.Price,
            IsVegetarian = roll.IsVegetarian,
            IsSignatureRoll = roll.IsSignatureRoll,
            IsAvailable = roll.IsAvailable,
            Ingredients = roll.Ingredients?.ToList() ?? new List<string>(),
            Allergens = roll.Allergens?.ToList() ?? new List<string>()
        };
        showRollForm = true;
    }

    private async Task SaveRoll()
    {
        try
        {
            bool success;
            if (editingRoll != null)
            {
                success = await ApiService.UpdateSushiRollAsync(rollForm.Id, rollForm);
            }
            else
            {
                success = await ApiService.CreateSushiRollAsync(rollForm);
            }

            if (success)
            {
                await LoadData();
                CancelRollForm();
                await JSRuntime.InvokeVoidAsync("alert", $"Roll {(editingRoll != null ? "updated" : "created")} successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to {(editingRoll != null ? "update" : "create")} roll. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error saving roll: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while saving the roll.");
        }
    }

    private async Task ToggleRollAvailability(SushiRoll roll)
    {
        try
        {
            bool success = await ApiService.ToggleRollAvailabilityAsync(roll.Id, !roll.IsAvailable);
            if (success)
            {
                roll.IsAvailable = !roll.IsAvailable;
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to update roll availability.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error toggling availability: {ex.Message}");
        }
    }

    private void CancelRollForm()
    {
        showRollForm = false;
        editingRoll = null;
        rollForm = new SushiRoll();
    }
} 