@page "/menu-management"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using HidaSushi.Admin.Services
@inject AdminApiService AdminApiService
@inject NavigationManager Navigation

<PageTitle>Menu Management - HIDA SUSHI</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 relative overflow-hidden">
    <!-- Animated background shapes -->
    <div class="absolute inset-0 overflow-hidden">
        <div class="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob"></div>
        <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000"></div>
        <div class="absolute top-40 left-40 w-80 h-80 bg-indigo-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000"></div>
    </div>

    <!-- Header Section -->
    <div class="relative z-10 bg-gradient-to-r from-royal-purple via-pink-primary to-deep-purple shadow-professional">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm animate-bounce">
                        <span class="text-3xl">üç£</span>
                    </div>
                <div>
                        <h1 class="text-4xl font-bold text-white mb-2 font-poppins">Menu Management</h1>
                        <p class="text-light-purple text-lg font-inter">Manage your signature rolls and menu items</p>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <button @onclick="@(() => Navigation.NavigateTo("/admin"))" 
                            class="bg-white/20 hover:bg-white/30 text-white font-bold py-3 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 backdrop-blur-sm font-poppins cursor-pointer">
                        <span class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                            Back to Dashboard
                        </span>
                    </button>
                    <button @onclick="ShowAddModal" 
                            class="bg-white/20 hover:bg-white/30 text-white font-bold py-3 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 backdrop-blur-sm font-poppins cursor-pointer">
                        <span class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                            Add New Roll
                        </span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Total Rolls</p>
                        <p class="text-3xl font-bold text-white font-poppins">@sushiRolls.Count</p>
                        </div>
                    <div class="w-12 h-12 bg-purple-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">üç£</span>
                    </div>
                </div>
                        </div>
            
            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Available</p>
                        <p class="text-3xl font-bold text-green-400 font-poppins">@sushiRolls.Count(r => r.IsAvailable)</p>
                        </div>
                    <div class="w-12 h-12 bg-green-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">‚úÖ</span>
                    </div>
                </div>
                        </div>
            
            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Signature Rolls</p>
                        <p class="text-3xl font-bold text-royal-purple font-poppins">@sushiRolls.Count(r => r.IsSignatureRoll)</p>
                    </div>
                    <div class="w-12 h-12 bg-purple-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">üëë</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Menu Items Grid -->
        <div class="glass-effect rounded-2xl shadow-professional p-8">
            <div class="flex items-center justify-between mb-6">
                <h3 class="text-2xl font-bold text-white font-poppins">Signature Rolls</h3>
                <div class="w-12 h-1 bg-gradient-to-r from-royal-purple to-pink-primary rounded-full"></div>
    </div>

            @if (isLoading)
            {
                <div class="flex items-center justify-center py-12">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-royal-purple"></div>
                    <span class="ml-3 text-gray-300 font-inter">Loading menu items...</span>
                </div>
            }
            else if (sushiRolls.Any())
            {
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    @foreach (var roll in sushiRolls)
                    {
                        <div class="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 hover:bg-white/20 transition-all duration-300 transform hover:scale-105 flex flex-col h-full">
                            <div class="flex items-start justify-between mb-4">
                                <div class="flex-1">
                                    <h4 class="font-bold text-white font-poppins text-lg">@roll.Name</h4>
                                    <p class="text-gray-300 font-inter text-sm mt-1 line-clamp-2">@roll.Description</p>
                                </div>
                                <div class="flex items-center space-x-2 ml-2">
                                    @if (roll.IsSignatureRoll)
                                    {
                                        <span class="bg-royal-gold/20 text-yellow-300 text-xs font-semibold px-2 py-1 rounded-full border border-yellow-500/30 font-inter">Signature</span>
                                    }
                                    @if (roll.IsVegetarian)
                                    {
                                        <span class="bg-green-500/20 text-green-300 text-xs font-semibold px-2 py-1 rounded-full border border-green-500/30 font-inter">Veg</span>
                                    }
                                </div>
                            </div>
                            
                            <div class="flex items-center justify-between mb-4">
                                <span class="text-2xl font-bold text-white font-poppins">‚Ç¨@roll.Price.ToString("F2")</span>
                                <div class="flex items-center space-x-2">
                                    <span class="text-sm text-gray-300 font-inter">
                                        @(roll.IsAvailable ? "Available" : "Unavailable")
                                    </span>
                                    <div class="w-3 h-3 @(roll.IsAvailable ? "bg-green-500" : "bg-red-500") rounded-full"></div>
                                </div>
                            </div>

                            <!-- Spacer to push buttons to bottom -->
                            <div class="flex-grow"></div>
                            
                            <div class="flex items-center justify-between gap-2 mt-auto">
                                <button @onclick="() => EditRoll(roll)" 
                                        class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-3 rounded-lg transition-all duration-200 font-poppins text-sm cursor-pointer">
                                    Edit
                                </button>
                                <button @onclick="() => ToggleAvailability(roll)" 
                                        class="flex-1 @(roll.IsAvailable ? "bg-orange-500 hover:bg-orange-600" : "bg-green-500 hover:bg-green-600") text-white font-medium py-2 px-3 rounded-lg transition-all duration-200 font-poppins text-sm cursor-pointer">
                                    @(roll.IsAvailable ? "Disable" : "Enable")
                                </button>
                                <button @onclick="() => DeleteRoll(roll)" 
                                        class="flex-1 bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-3 rounded-lg transition-all duration-200 font-poppins text-sm cursor-pointer">
                                    Delete
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-12">
                    <div class="w-24 h-24 bg-white/10 rounded-full flex items-center justify-center mx-auto mb-4">
                        <span class="text-4xl">üç£</span>
                    </div>
                    <h4 class="text-xl font-semibold text-white mb-2 font-poppins">No menu items yet</h4>
                    <p class="text-gray-300 font-inter">Add your first signature roll to get started!</p>
                </div>
            }
        </div>
    </div>
                    </div>

@if (showEditor)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
        <div class="glass-effect rounded-2xl shadow-professional w-full max-w-md mx-4 p-6">
            <h3 class="text-xl font-bold text-white font-poppins mb-4">@(editingRoll.Id > 0 ? "Edit Roll" : "Add New Roll")</h3>
                    <div class="space-y-4">
                        <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Name</label>
                    <input class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-gray-400" @bind="editingRoll.Name" placeholder="Roll name" />
                        </div>
                        <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Description</label>
                    <textarea class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-gray-400" rows="3" @bind="editingRoll.Description" placeholder="Describe this delicious roll..."></textarea>
                            </div>
                            <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Price (‚Ç¨)</label>
                    <input type="number" step="0.01" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white" @bind-value="editingRoll.Price" @bind-value:event="onchange" />
                </div>
                <div class="flex flex-col space-y-2">
                    <label class="inline-flex items-center space-x-2">
                        <input type="checkbox" @bind="editingRoll.IsAvailable" class="rounded" />
                        <span class="text-gray-300">Available</span>
                                    </label>
                    <label class="inline-flex items-center space-x-2">
                        <input type="checkbox" @bind="editingRoll.IsSignatureRoll" class="rounded" />
                        <span class="text-gray-300">Signature</span>
                                    </label>
                    <label class="inline-flex items-center space-x-2">
                        <input type="checkbox" @bind="editingRoll.IsVegetarian" class="rounded" />
                        <span class="text-gray-300">Vegetarian</span>
                                    </label>
                                </div>
                            </div>
            <div class="mt-6 flex justify-end space-x-3">
                <button class="px-4 py-2 rounded-lg bg-white/10 hover:bg-white/20 text-gray-300 hover:text-white hover:scale-105 hover:shadow-lg transition-all duration-300 ease-in-out transform active:scale-95 cursor-pointer" @onclick="CloseEditor">Cancel</button>
                <button class="px-4 py-2 rounded-lg bg-gradient-to-r from-royal-purple to-pink-primary text-white hover:from-royal-purple/80 hover:to-pink-primary/80 hover:scale-105 hover:shadow-xl hover:shadow-royal-purple/30 transition-all duration-300 ease-in-out transform active:scale-95 cursor-pointer" @onclick="SaveRoll">Save</button>
            </div>
                        </div>
                    </div>
}

<!-- Success Toast Notification -->
@if (showSuccessToast)
{
    <div class="fixed top-4 right-4 z-50 transform transition-all duration-500 ease-in-out @(showSuccessToast ? "translate-x-0 opacity-100" : "translate-x-full opacity-0")">
        <div class="@(isSuccessToast ? "bg-gradient-to-r from-green-500 to-emerald-600" : "bg-gradient-to-r from-red-500 to-red-600") text-white px-6 py-4 rounded-lg shadow-xl border @(isSuccessToast ? "border-green-400/20" : "border-red-400/20") backdrop-blur-sm">
            <div class="flex items-center space-x-3">
                <div class="w-6 h-6 bg-white/20 rounded-full flex items-center justify-center">
                    @if (isSuccessToast)
                    {
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                    }
                    else
                    {
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    }
                </div>
                <div>
                    <p class="font-semibold font-poppins">@toastMessage</p>
                    <p class="text-sm @(isSuccessToast ? "text-green-100" : "text-red-100") font-inter">@(isSuccessToast ? "Changes saved successfully" : "Please try again")</p>
                    </div>
                </div>
            </div>
        </div>
    }

@implements IDisposable

@code {
    private List<SushiRoll> sushiRolls = new();
    private bool isLoading = true;
    private bool showEditor = false;
    private SushiRoll editingRoll = new();
    private bool showSuccessToast = false;
    private string toastMessage = "";
    private Timer? toastTimer;
    private bool isSuccessToast = true; // Added for success/error differentiation

    protected override async Task OnInitializedAsync()
    {
        await LoadMenuData();
    }

    private async Task LoadMenuData()
    {
        try
        {
            isLoading = true;
            sushiRolls = await AdminApiService.GetSushiRollsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading menu data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowAddModal()
    {
        editingRoll = new SushiRoll();
        showEditor = true;
    }

    private void EditRoll(SushiRoll roll)
    {
        editingRoll = new SushiRoll
        {
            Id = roll.Id,
            Name = roll.Name,
            Description = roll.Description,
            Price = roll.Price,
            IsAvailable = roll.IsAvailable,
            IsSignatureRoll = roll.IsSignatureRoll,
            IsVegetarian = roll.IsVegetarian
        };
        showEditor = true;
    }

    private void CloseEditor()
    {
        showEditor = false;
    }

    private async Task SaveRoll()
    {
        var saved = await AdminApiService.SaveSushiRollAsync(editingRoll);
        if (saved != null)
        {
            var idx = sushiRolls.FindIndex(r => r.Id == saved.Id);
            if (idx >= 0) sushiRolls[idx] = saved; else sushiRolls.Add(saved);
            showEditor = false;
            
            // Show success toast
            toastMessage = editingRoll.Id > 0 ? "Roll updated successfully!" : "Roll created successfully!";
            showSuccessToast = true;
            isSuccessToast = true; // Set for success
            StateHasChanged();
            
            // Hide toast after 3 seconds
            toastTimer?.Dispose(); // Clean up any existing timer
            toastTimer = new Timer(async _ =>
            {
                showSuccessToast = false;
                await InvokeAsync(StateHasChanged);
                toastTimer?.Dispose();
            }, null, 3000, Timeout.Infinite);
            }
            else
            {
            // Show error toast if save failed
            toastMessage = "Failed to save roll";
            showSuccessToast = true;
            isSuccessToast = false; // Set for error
            StateHasChanged();
            
            // Hide error toast after 3 seconds
            toastTimer?.Dispose();
            toastTimer = new Timer(async _ =>
            {
                showSuccessToast = false;
                await InvokeAsync(StateHasChanged);
                toastTimer?.Dispose();
            }, null, 3000, Timeout.Infinite);
        }
    }

    private async Task ToggleAvailability(SushiRoll roll)
    {
        try
        {
            var ok = await AdminApiService.ToggleSushiRollAvailabilityAsync(roll.Id);
            if (ok)
            {
                roll.IsAvailable = !roll.IsAvailable;
            }
            else
            {
                Console.WriteLine("Toggle availability failed");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling availability: {ex.Message}");
        }
    }

    private async Task DeleteRoll(SushiRoll roll)
    {
        try
        {
            var ok = await AdminApiService.DeleteSushiRollAsync(roll.Id);
            if (ok)
            {
                sushiRolls.Remove(roll);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting roll: {ex.Message}");
        }
    }

    public void Dispose()
    {
        toastTimer?.Dispose();
    }
} 