@page "/user-management"
@using HidaSushi.Shared.Models
@using HidaSushi.Admin.Services
@inject AdminApiService ApiService
@inject IJSRuntime JSRuntime

<PageTitle>User Management - HIDA SUSHI Admin</PageTitle>

<AuthGuard>
    <!-- User Management Header -->
    <div class="bg-gradient-to-r from-green-600 to-teal-600 text-white p-6">
        <div class="container mx-auto">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold">👥 User Management</h1>
                    <p class="text-green-100">Manage admin users • Control permissions • Monitor access</p>
                </div>
                <div class="flex items-center space-x-4">
                    <button @onclick="ShowAddUserModal" 
                            class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-colors flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                        </svg>
                        Add User
                    </button>
                    <button @onclick="RefreshUsers" 
                            class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-colors flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                        </svg>
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- User Statistics -->
    <div class="bg-white border-b">
        <div class="container mx-auto p-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-green-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-green-600">Total Users</p>
                            <p class="text-lg font-bold text-green-900">@users.Count</p>
                        </div>
                    </div>
                </div>
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-blue-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-blue-600">Active Users</p>
                            <p class="text-lg font-bold text-blue-900">@users.Count(u => u.IsActive)</p>
                        </div>
                    </div>
                </div>
                <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-purple-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-purple-600">Admins</p>
                            <p class="text-lg font-bold text-purple-900">@users.Count(u => u.Role == "Admin")</p>
                        </div>
                    </div>
                </div>
                <div class="bg-amber-50 border border-amber-200 rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="p-2 bg-amber-600 rounded-lg text-white">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-amber-600">Kitchen Staff</p>
                            <p class="text-lg font-bold text-amber-900">@users.Count(u => u.Role == "Kitchen Staff")</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Users Table -->
    <div class="container mx-auto p-6">
        @if (isLoading)
        {
            <div class="text-center py-8">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-green-600"></div>
                <p class="mt-2 text-gray-600">Loading users...</p>
            </div>
        }
        else if (users.Any())
        {
            <div class="bg-white rounded-lg shadow overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var user in users)
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-10 w-10">
                                                <div class="h-10 w-10 rounded-full bg-gradient-to-r from-purple-400 to-pink-400 flex items-center justify-center text-white font-medium">
                                                    @user.Username.Substring(0, 1).ToUpper()
                                                </div>
                                            </div>
                                            <div class="ml-4">
                                                <div class="text-sm font-medium text-gray-900">@user.Username</div>
                                                <div class="text-sm text-gray-500">@user.Email</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetRoleBadgeClass(user.Role)">
                                            @GetRoleIcon(user.Role) @user.Role
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(user.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                            @(user.IsActive ? "🟢 Active" : "🔴 Inactive")
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @(user.LastLogin?.ToString("dd/MM/yyyy HH:mm") ?? "Never")
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                        <div class="flex space-x-2">
                                            <button @onclick="@(() => EditUser(user))" 
                                                    class="text-blue-600 hover:text-blue-900">
                                                Edit
                                            </button>
                                            <button @onclick="@(() => ToggleUserStatus(user))" 
                                                    class="@(user.IsActive ? "text-red-600 hover:text-red-900" : "text-green-600 hover:text-green-900")">
                                                @(user.IsActive ? "Deactivate" : "Activate")
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 48 48">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No users found</h3>
                <p class="mt-1 text-sm text-gray-500">Get started by creating a new admin user.</p>
            </div>
        }
    </div>
</AuthGuard>

@code {
    private List<AdminUser> users = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        try
        {
            // Mock users for now - would call ApiService.GetUsersAsync() when implemented
            users = new List<AdminUser>
            {
                new AdminUser { Id = 1, Username = "admin", Email = "admin@hidasushi.com", Role = "Admin", IsActive = true, LastLogin = DateTime.Now.AddHours(-2) },
                new AdminUser { Id = 2, Username = "jonathan", Email = "jonathan@hidasushi.com", Role = "Chef", IsActive = true, LastLogin = DateTime.Now.AddMinutes(-30) },
                new AdminUser { Id = 3, Username = "kitchen", Email = "kitchen@hidasushi.com", Role = "Kitchen Staff", IsActive = true, LastLogin = DateTime.Now.AddHours(-1) },
                new AdminUser { Id = 4, Username = "manager", Email = "manager@hidasushi.com", Role = "Manager", IsActive = false, LastLogin = DateTime.Now.AddDays(-7) }
            };
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshUsers()
    {
        await LoadUsers();
    }

    private async Task ShowAddUserModal()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Add user functionality would be implemented here.");
    }

    private async Task EditUser(AdminUser user)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Edit user functionality for {user.Username} would be implemented here.");
    }

    private async Task ToggleUserStatus(AdminUser user)
    {
        try
        {
            user.IsActive = !user.IsActive;
            // Here you would call ApiService.ToggleUserStatusAsync(user.Id, user.IsActive)
            await JSRuntime.InvokeVoidAsync("alert", $"User {user.Username} has been {(user.IsActive ? "activated" : "deactivated")}.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error toggling user status: {ex.Message}");
        }
    }

    private string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Admin" => "bg-purple-100 text-purple-800",
            "Chef" => "bg-amber-100 text-amber-800",
            "Kitchen Staff" => "bg-blue-100 text-blue-800",
            "Manager" => "bg-green-100 text-green-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetRoleIcon(string role)
    {
        return role switch
        {
            "Admin" => "👑",
            "Chef" => "👨‍🍳",
            "Kitchen Staff" => "🍳",
            "Manager" => "👔",
            _ => "👤"
        };
    }
} 