@page "/admin"
@using HidaSushi.Shared.Models
@using HidaSushi.Admin.Services
@inject AdminApiService ApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Admin Dashboard - HIDA SUSHI</PageTitle>

<AuthGuard>
    <!-- Admin Header -->
    <div class="bg-gradient-to-r from-purple-600 to-amber-500 text-white p-6">
        <div class="container mx-auto">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold">HIDA SUSHI Admin</h1>
                    <p class="text-purple-100">Kitchen Management Dashboard</p>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="text-right">
                        <p class="text-2xl font-bold">@DateTime.Now.ToString("HH:mm")</p>
                        <p class="text-purple-100">@DateTime.Now.ToString("MMM dd, yyyy")</p>
                        @if (!string.IsNullOrEmpty(currentUser))
                        {
                            <p class="text-purple-200 text-sm">Welcome, @currentUser</p>
                        }
                    </div>
                    <button @onclick="Logout" 
                            class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-colors">
                        üö™ Logout
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Connection Status -->
    <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
        <div class="flex">
            <div class="ml-3">
                <p class="text-sm text-yellow-700">
                    <span class="font-medium">API Status:</span>
                    @if (isConnectedToApi)
                    {
                        <span class="text-green-600">‚úÖ Connected to real database</span>
                    }
                    else
                    {
                        <span class="text-orange-600">‚ö†Ô∏è Using fallback data (API not available)</span>
                    }
                </p>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="bg-gray-50 py-6">
        <div class="container mx-auto px-4">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Total Orders</p>
                            <p class="text-2xl font-bold text-gray-900">@GetStatsValue("TotalOrders")</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-orange-100 text-orange-600">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Pending</p>
                            <p class="text-2xl font-bold text-gray-900">@GetStatsValue("PendingOrders")</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-green-100 text-green-600">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Completed</p>
                            <p class="text-2xl font-bold text-gray-900">@GetStatsValue("CompletedOrders")</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-purple-100 text-purple-600">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Revenue</p>
                            <p class="text-2xl font-bold text-gray-900">‚Ç¨@GetStatsValue("TotalRevenue")</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions Section -->
    <div class="bg-white border-b py-6">
        <div class="container mx-auto px-4">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
                <a href="/admin/menu" class="flex items-center p-4 bg-purple-50 border border-purple-200 rounded-lg hover:bg-purple-100 transition-colors group">
                    <div class="p-2 rounded-lg bg-purple-600 text-white group-hover:bg-purple-700 transition-colors">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="font-medium text-purple-900">Menu Management</p>
                        <p class="text-sm text-purple-600">Manage rolls & ingredients</p>
                    </div>
                </a>

                <a href="/admin/analytics" class="flex items-center p-4 bg-blue-50 border border-blue-200 rounded-lg hover:bg-blue-100 transition-colors group">
                    <div class="p-2 rounded-lg bg-blue-600 text-white group-hover:bg-blue-700 transition-colors">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="font-medium text-blue-900">Analytics</p>
                        <p class="text-sm text-blue-600">Sales & performance data</p>
                    </div>
                </a>

                <a href="/admin/users" class="flex items-center p-4 bg-green-50 border border-green-200 rounded-lg hover:bg-green-100 transition-colors group">
                    <div class="p-2 rounded-lg bg-green-600 text-white group-hover:bg-green-700 transition-colors">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="font-medium text-green-900">User Management</p>
                        <p class="text-sm text-green-600">Admin users & permissions</p>
                    </div>
                </a>

                <a href="/admin/settings" class="flex items-center p-4 bg-amber-50 border border-amber-200 rounded-lg hover:bg-amber-100 transition-colors group">
                    <div class="p-2 rounded-lg bg-amber-600 text-white group-hover:bg-amber-700 transition-colors">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="font-medium text-amber-900">Settings</p>
                        <p class="text-sm text-amber-600">System configuration</p>
                    </div>
                </a>
            </div>
        </div>
    </div>

    <!-- Orders Section -->
    <div class="container mx-auto px-4 py-8">
        <div class="flex items-center justify-between mb-6">
            <h2 class="text-2xl font-bold text-gray-900">Live Orders</h2>
            <div class="flex items-center space-x-4">
                <button @onclick="RefreshOrders" class="btn btn-outline" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>üîÑ Loading...</span>
                    }
                    else
                    {
                        <span>üîÑ Refresh</span>
                    }
                </button>
                <div class="flex items-center space-x-2">
                    <span class="w-3 h-3 @(isConnectedToApi ? "bg-green-500" : "bg-yellow-500") rounded-full animate-pulse"></span>
                    <span class="text-sm text-gray-600">@(isConnectedToApi ? "Live Updates" : "Fallback Mode")</span>
                </div>
            </div>
        </div>

        @if (pendingOrders.Any())
        {
            <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                @foreach (var order in pendingOrders.OrderBy(o => o.CreatedAt))
                {
                    <div class="bg-white rounded-lg shadow-lg border-l-4 @GetOrderBorderColor(order.Status)">
                        <!-- Order Header -->
                        <div class="p-4 border-b">
                            <div class="flex items-center justify-between">
                                <div>
                                    <h3 class="font-bold text-lg">#@order.OrderNumber.Substring(Math.Max(0, order.OrderNumber.Length - 4))</h3>
                                    <p class="text-sm text-gray-600">@order.CreatedAt.ToString("HH:mm") ‚Ä¢ @order.Type</p>
                                </div>
                                <div class="text-right">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @order.Status.GetStatusColor()">
                                        @order.Status.GetStatusDisplay()
                                    </span>
                                    <p class="text-lg font-bold text-purple-600 mt-1">‚Ç¨@order.TotalAmount</p>
                                </div>
                            </div>
                        </div>

                        <!-- Order Items -->
                        <div class="p-4">
                            <h4 class="font-semibold mb-3">Items:</h4>
                            <div class="space-y-2">
                                @foreach (var item in order.Items)
                                {
                                    <div class="flex justify-between items-start text-sm">
                                        <div class="flex-1">
                                            <span class="font-medium">@(item.SushiRoll?.Name ?? item.CustomRoll?.Name ?? "Unknown Item")</span>
                                            @if (!string.IsNullOrEmpty(item.Notes))
                                            {
                                                <p class="text-purple-600 italic">Note: @item.Notes</p>
                                            }
                                        </div>
                                        <span class="font-semibold ml-2">x@item.Quantity</span>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Customer Info -->
                        <div class="p-4 border-t bg-gray-50">
                            <div class="text-sm">
                                <p><strong>Customer:</strong> @order.CustomerName</p>
                                @if (order.Type == OrderType.Delivery && !string.IsNullOrEmpty(order.DeliveryAddress))
                                {
                                    <p><strong>Address:</strong> @order.DeliveryAddress</p>
                                }
                                @if (!string.IsNullOrEmpty(order.Notes))
                                {
                                    <p><strong>Notes:</strong> @order.Notes</p>
                                }
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="p-4 border-t">
                            <div class="grid grid-cols-2 gap-2">
                                @if (order.Status == OrderStatus.Received)
                                {
                                    <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.InPreparation)" 
                                            class="btn btn-royal text-sm" disabled="@isUpdating">
                                        üë®‚Äçüç≥ Start Cooking
                                    </button>
                                    <button @onclick="() => CancelOrder(order.Id)" 
                                            class="btn bg-red-500 hover:bg-red-600 text-white text-sm" disabled="@isUpdating">
                                        ‚ùå Cancel
                                    </button>
                                }
                                else if (order.Status == OrderStatus.InPreparation)
                                {
                                    <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Ready)" 
                                            class="btn btn-gold text-sm" disabled="@isUpdating">
                                        ‚úÖ Ready
                                    </button>
                                    <button disabled class="btn bg-gray-300 text-gray-500 text-sm cursor-not-allowed">
                                        üç£ Cooking...
                                    </button>
                                }
                                else if (order.Status == OrderStatus.Ready && order.Type == OrderType.Delivery)
                                {
                                    <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.OutForDelivery)" 
                                            class="btn btn-royal text-sm" disabled="@isUpdating">
                                        üõµ Out for Delivery
                                    </button>
                                    <button disabled class="btn bg-gray-300 text-gray-500 text-sm cursor-not-allowed">
                                        üì¶ Ready
                                    </button>
                                }
                                else if (order.Status == OrderStatus.Ready && order.Type == OrderType.Pickup)
                                {
                                    <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Completed)" 
                                            class="btn btn-gold text-sm" disabled="@isUpdating">
                                        ‚úÖ Picked Up
                                    </button>
                                    <button disabled class="btn bg-gray-300 text-gray-500 text-sm cursor-not-allowed">
                                        üì¶ Ready
                                    </button>
                                }
                                else if (order.Status == OrderStatus.OutForDelivery)
                                {
                                    <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Completed)" 
                                            class="btn btn-gold text-sm" disabled="@isUpdating">
                                        ‚úÖ Delivered
                                    </button>
                                    <button disabled class="btn bg-gray-300 text-gray-500 text-sm cursor-not-allowed">
                                        üõµ In Transit
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- Timer -->
                        <div class="px-4 pb-4">
                            <div class="text-center text-sm text-gray-600">
                                ‚è±Ô∏è @GetOrderAge(order.CreatedAt) ago
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <div class="text-6xl mb-4">üç£</div>
                <h3 class="text-xl font-semibold text-gray-900 mb-2">No Pending Orders</h3>
                <p class="text-gray-600">All caught up! New orders will appear here automatically.</p>
            </div>
        }
    </div>
</AuthGuard>

@code {
    private List<Order> pendingOrders = new();
    private dynamic stats = new { TotalOrders = 0, PendingOrders = 0, CompletedOrders = 0, TotalRevenue = 0m };
    private Timer? refreshTimer;
    private bool isLoading = false;
    private bool isUpdating = false;
    private bool isConnectedToApi = false;
    private string currentUser = "";

    protected override async Task OnInitializedAsync()
    {
        // Get current user from localStorage
        currentUser = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "adminUsername") ?? "Admin";
        
        await LoadData();
        
        // Set up auto-refresh every 30 seconds
        refreshTimer = new Timer(async _ => await InvokeAsync(async () => 
        {
            await LoadData();
            StateHasChanged();
        }), null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
    }

    private async Task Logout()
    {
        try
        {
            // Clear local storage
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "adminToken");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "adminUsername");
            
            // Show logout message
            await JSRuntime.InvokeVoidAsync("alert", "Logged out successfully!");
            
            // Redirect to login
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
            Navigation.NavigateTo("/login", forceLoad: true);
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        
        try
        {
            // Try to load real data from API
            var ordersTask = ApiService.GetPendingOrdersAsync();
            var statsTask = ApiService.GetDailyStatsAsync();
            
            await Task.WhenAll(ordersTask, statsTask);
            
            pendingOrders = await ordersTask;
            stats = await statsTask;
            
            // Check if we're using real data (not just fallback)
            var totalOrders = GetStatsIntValue("TotalOrders");
            isConnectedToApi = pendingOrders.Any() || totalOrders > 0;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading data: {ex.Message}");
            isConnectedToApi = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshOrders()
    {
        await LoadData();
        StateHasChanged();
    }

    private async Task UpdateOrderStatus(int orderId, OrderStatus newStatus)
    {
        isUpdating = true;
        
        try
        {
            var success = await ApiService.UpdateOrderStatusAsync(orderId, newStatus);
            
            if (success)
            {
                // Update local order status
                var order = pendingOrders.FirstOrDefault(o => o.Id == orderId);
                if (order != null)
                {
                    order.Status = newStatus;
                    
                    // If completed, remove from pending list
                    if (newStatus == OrderStatus.Completed)
                    {
                        pendingOrders.Remove(order);
                    }
                    
                    StateHasChanged();
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to update order status. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error updating order status: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error updating order status. Please try again.");
        }
        finally
        {
            isUpdating = false;
        }
    }

    private async Task CancelOrder(int orderId)
    {
        isUpdating = true;
        
        try
        {
            var success = await ApiService.CancelOrderAsync(orderId);
            
            if (success)
            {
                var order = pendingOrders.FirstOrDefault(o => o.Id == orderId);
                if (order != null)
                {
                    order.Status = OrderStatus.Cancelled;
                    pendingOrders.Remove(order);
                    StateHasChanged();
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to cancel order. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error cancelling order: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error cancelling order. Please try again.");
        }
        finally
        {
            isUpdating = false;
        }
    }

    private string GetOrderBorderColor(OrderStatus status) => status switch
    {
        OrderStatus.Received => "border-blue-500",
        OrderStatus.InPreparation => "border-orange-500",
        OrderStatus.Ready => "border-green-500",
        OrderStatus.OutForDelivery => "border-purple-500",
        _ => "border-gray-300"
    };

    private string GetOrderAge(DateTime createdAt)
    {
        var age = DateTime.Now - createdAt;
        if (age.TotalMinutes < 1)
            return "Just now";
        else if (age.TotalMinutes < 60)
            return $"{(int)age.TotalMinutes} min";
        else
            return $"{(int)age.TotalHours}h {(int)(age.TotalMinutes % 60)}m";
    }

    private object GetStatsValue(string propertyName)
    {
        try
        {
            var property = stats.GetType().GetProperty(propertyName);
            return property?.GetValue(stats) ?? 0;
        }
        catch
        {
            return 0;
        }
    }

    private int GetStatsIntValue(string propertyName)
    {
        try
        {
            var value = GetStatsValue(propertyName);
            return Convert.ToInt32(value);
        }
        catch
        {
            return 0;
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
} 