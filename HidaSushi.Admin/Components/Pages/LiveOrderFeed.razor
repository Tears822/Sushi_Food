@page "/live-orders"
@using HidaSushi.Shared.Models
@using HidaSushi.Admin.Services
@inject AdminApiService ApiService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Live Order Feed - HIDA SUSHI Admin</PageTitle>

<AuthGuard>
    <!-- Live Order Feed Header -->
    <div class="bg-gradient-to-r from-red-600 to-orange-600 text-white p-6">
        <div class="container mx-auto">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold">🔴 Live Order Feed</h1>
                    <p class="text-red-100">Real-time incoming orders • Kitchen Dashboard</p>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="text-right">
                        <div class="flex items-center space-x-2 mb-2">
                            <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                            <span class="text-green-200 font-medium">LIVE</span>
                        </div>
                        <p class="text-red-200 text-sm">Last update: @lastUpdateTime.ToString("HH:mm:ss")</p>
                    </div>
                    <button @onclick="RefreshOrders" 
                            class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-colors flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                        </svg>
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Stats Bar -->
    <div class="bg-gray-50 border-b border-gray-200 py-4">
        <div class="container mx-auto px-4">
            <div class="grid grid-cols-2 md:grid-cols-5 gap-4">
                <div class="text-center">
                    <div class="text-2xl font-bold text-red-600">@pendingCount</div>
                    <div class="text-sm text-gray-600">Pending</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-orange-600">@inPrepCount</div>
                    <div class="text-sm text-gray-600">In Prep</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-blue-600">@readyCount</div>
                    <div class="text-sm text-gray-600">Ready</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-purple-600">@outForDeliveryCount</div>
                    <div class="text-sm text-gray-600">Out for Delivery</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-green-600">@completedTodayCount</div>
                    <div class="text-sm text-gray-600">Completed Today</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Tabs -->
    <div class="bg-white border-b">
        <div class="container mx-auto px-4">
            <div class="flex space-x-8">
                <button @onclick="@(() => SetFilter(OrderFilter.All))" 
                        class="py-4 px-2 border-b-2 font-medium text-sm @(currentFilter == OrderFilter.All ? "border-red-500 text-red-600" : "border-transparent text-gray-500 hover:text-gray-700")">
                    All Orders (@allOrders.Count)
                </button>
                <button @onclick="@(() => SetFilter(OrderFilter.Pending))" 
                        class="py-4 px-2 border-b-2 font-medium text-sm @(currentFilter == OrderFilter.Pending ? "border-red-500 text-red-600" : "border-transparent text-gray-500 hover:text-gray-700")">
                    Pending (@pendingCount)
                </button>
                <button @onclick="@(() => SetFilter(OrderFilter.InPreparation))" 
                        class="py-4 px-2 border-b-2 font-medium text-sm @(currentFilter == OrderFilter.InPreparation ? "border-red-500 text-red-600" : "border-transparent text-gray-500 hover:text-gray-700")">
                    In Preparation (@inPrepCount)
                </button>
                <button @onclick="@(() => SetFilter(OrderFilter.Ready))" 
                        class="py-4 px-2 border-b-2 font-medium text-sm @(currentFilter == OrderFilter.Ready ? "border-red-500 text-red-600" : "border-transparent text-gray-500 hover:text-gray-700")">
                    Ready (@readyCount)
                </button>
                <button @onclick="@(() => SetFilter(OrderFilter.OutForDelivery))" 
                        class="py-4 px-2 border-b-2 font-medium text-sm @(currentFilter == OrderFilter.OutForDelivery ? "border-red-500 text-red-600" : "border-transparent text-gray-500 hover:text-gray-700")">
                    Out for Delivery (@outForDeliveryCount)
                </button>
            </div>
        </div>
    </div>

    <!-- Orders Grid -->
    <div class="container mx-auto p-6">
        @if (isLoading)
        {
            <div class="text-center py-8">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
                <p class="mt-2 text-gray-600">Loading live orders...</p>
            </div>
        }
        else if (filteredOrders.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (var order in filteredOrders.OrderBy(GetOrderPriority).ThenBy(o => o.CreatedAt))
                {
                    <div class="bg-white rounded-lg shadow-lg border @GetOrderBorderClass(order.Status) hover:shadow-xl transition-shadow">
                        <!-- Order Header -->
                        <div class="@GetOrderHeaderClass(order.Status) p-4 rounded-t-lg">
                            <div class="flex justify-between items-center">
                                <div>
                                    <h3 class="font-bold text-lg text-gray-900">#@order.OrderNumber</h3>
                                    <p class="text-sm text-gray-600">@GetTimeAgo(order.CreatedAt)</p>
                                </div>
                                <div class="text-right">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStatusBadgeClass(order.Status)">
                                        @GetStatusIcon(order.Status) @order.Status
                                    </span>
                                </div>
                            </div>
                        </div>

                        <!-- Customer Info -->
                        <div class="p-4">
                            <div class="mb-4">
                                <div class="flex items-center mb-2">
                                    <svg class="w-4 h-4 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                                    </svg>
                                    <span class="font-medium text-gray-900">@order.CustomerName</span>
                                </div>
                                <div class="flex items-center mb-2">
                                    <svg class="w-4 h-4 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 7.89a2 2 0 002.83 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                                    </svg>
                                    <span class="text-sm text-gray-600">@order.CustomerEmail</span>
                                </div>
                                @if (order.Type == OrderType.Delivery && !string.IsNullOrEmpty(order.DeliveryAddress))
                                {
                                    <div class="flex items-start">
                                        <svg class="w-4 h-4 text-gray-400 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                                        </svg>
                                        <span class="text-sm text-gray-600">@order.DeliveryAddress</span>
                                    </div>
                                }
                            </div>

                            <!-- Order Items -->
                            <div class="mb-4">
                                <h4 class="font-medium text-gray-900 mb-2">Order Items (@order.Items.Count)</h4>
                                <div class="space-y-2">
                                    @foreach (var item in order.Items.Take(3))
                                    {
                                        <div class="flex justify-between items-center text-sm">
                                            <span class="text-gray-700">@(item.SushiRoll?.Name ?? item.CustomRoll?.Name ?? "Unknown Item") x@item.Quantity</span>
                                            <span class="font-medium">€@item.Price.ToString("F2")</span>
                                        </div>
                                    }
                                    @if (order.Items.Count > 3)
                                    {
                                        <div class="text-sm text-gray-500">+ @(order.Items.Count - 3) more items...</div>
                                    }
                                </div>
                            </div>

                            <!-- Order Total -->
                            <div class="flex justify-between items-center mb-4 pt-2 border-t">
                                <span class="font-bold text-gray-900">Total:</span>
                                <span class="font-bold text-lg text-gray-900">€@order.TotalAmount.ToString("F2")</span>
                            </div>

                            <!-- Notes -->
                            @if (!string.IsNullOrEmpty(order.Notes))
                            {
                                <div class="mb-4 p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                                    <div class="flex items-start">
                                        <svg class="w-4 h-4 text-yellow-600 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                                        </svg>
                                        <div>
                                            <p class="text-sm font-medium text-yellow-800">Special Instructions:</p>
                                            <p class="text-sm text-yellow-700">@order.Notes</p>
                                        </div>
                                    </div>
                                </div>
                            }

                            <!-- Action Buttons -->
                            <div class="grid grid-cols-2 gap-2">
                                @if (order.Status == OrderStatus.Received)
                                {
                                    <button @onclick="@(() => AcceptOrder(order.Id))" 
                                            class="bg-orange-600 text-white px-3 py-2 rounded text-sm hover:bg-orange-700 transition-colors">
                                        Accept Order
                                    </button>
                                    <button @onclick="@(() => CancelOrder(order.Id))" 
                                            class="bg-red-600 text-white px-3 py-2 rounded text-sm hover:bg-red-700 transition-colors">
                                        Cancel
                                    </button>
                                }
                                else if (order.Status == OrderStatus.InPreparation)
                                {
                                    <button @onclick="@(() => MarkOrderReady(order.Id))" 
                                            class="bg-blue-600 text-white px-3 py-2 rounded text-sm hover:bg-blue-700 transition-colors">
                                        Mark Ready
                                    </button>
                                    <button @onclick="@(() => CancelOrder(order.Id))" 
                                            class="bg-red-600 text-white px-3 py-2 rounded text-sm hover:bg-red-700 transition-colors">
                                        Cancel
                                    </button>
                                }
                                else if (order.Status == OrderStatus.Ready)
                                {
                                    @if (order.Type == OrderType.Delivery)
                                    {
                                        <button @onclick="@(() => MarkOutForDelivery(order.Id))" 
                                                class="bg-purple-600 text-white px-3 py-2 rounded text-sm hover:bg-purple-700 transition-colors">
                                            Out for Delivery
                                        </button>
                                    }
                                    else
                                    {
                                        <button @onclick="@(() => CompleteOrder(order.Id))" 
                                                class="bg-green-600 text-white px-3 py-2 rounded text-sm hover:bg-green-700 transition-colors">
                                            Complete Pickup
                                        </button>
                                    }
                                    <button @onclick="@(() => CancelOrder(order.Id))" 
                                            class="bg-red-600 text-white px-3 py-2 rounded text-sm hover:bg-red-700 transition-colors">
                                        Cancel
                                    </button>
                                }
                                else if (order.Status == OrderStatus.OutForDelivery)
                                {
                                    <button @onclick="@(() => CompleteOrder(order.Id))" 
                                            class="col-span-2 bg-green-600 text-white px-3 py-2 rounded text-sm hover:bg-green-700 transition-colors">
                                        Mark as Delivered
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 48 48">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No @GetFilterDisplayName() orders</h3>
                <p class="mt-1 text-sm text-gray-500">@(currentFilter == OrderFilter.All ? "No orders have been placed yet." : $"No {GetFilterDisplayName().ToLower()} orders at the moment.")</p>
            </div>
        }
    </div>
</AuthGuard>

@code {
    // Define OrderFilter enum at the top of the code block
    private enum OrderFilter
    {
        All,
        Pending,
        InPreparation,
        Ready,
        OutForDelivery
    }

    private List<Order> allOrders = new();
    private List<Order> filteredOrders = new();
    private OrderFilter currentFilter = OrderFilter.All;
    private bool isLoading = true;
    private DateTime lastUpdateTime = DateTime.Now;
    private Timer? refreshTimer;

    // Order counts for stats
    private int pendingCount => allOrders.Count(o => o.Status == OrderStatus.Received);
    private int inPrepCount => allOrders.Count(o => o.Status == OrderStatus.InPreparation);
    private int readyCount => allOrders.Count(o => o.Status == OrderStatus.Ready);
    private int outForDeliveryCount => allOrders.Count(o => o.Status == OrderStatus.OutForDelivery);
    private int completedTodayCount => allOrders.Count(o => o.Status == OrderStatus.Completed && o.CreatedAt.Date == DateTime.Today);

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
        
        // Set up auto-refresh every 30 seconds
        refreshTimer = new Timer(async _ => await InvokeAsync(RefreshOrders), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    private async Task LoadOrders()
    {
        try
        {
            isLoading = true;
            allOrders = await ApiService.GetLiveOrdersAsync();
            ApplyFilter();
            lastUpdateTime = DateTime.Now;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading orders:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshOrders()
    {
        await LoadOrders();
    }

    private void SetFilter(OrderFilter filter)
    {
        currentFilter = filter;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        filteredOrders = currentFilter switch
        {
            OrderFilter.Pending => allOrders.Where(o => o.Status == OrderStatus.Received).ToList(),
            OrderFilter.InPreparation => allOrders.Where(o => o.Status == OrderStatus.InPreparation).ToList(),
            OrderFilter.Ready => allOrders.Where(o => o.Status == OrderStatus.Ready).ToList(),
            OrderFilter.OutForDelivery => allOrders.Where(o => o.Status == OrderStatus.OutForDelivery).ToList(),
            _ => allOrders.ToList()
        };
    }

    private async Task AcceptOrder(int orderId)
    {
        var success = await ApiService.AcceptOrderAsync(orderId);
        if (success)
        {
            await RefreshOrders();
            await ShowNotification("Order accepted and moved to preparation!");
        }
    }

    private async Task MarkOrderReady(int orderId)
    {
        var success = await ApiService.MarkOrderReadyAsync(orderId);
        if (success)
        {
            await RefreshOrders();
            await ShowNotification("Order marked as ready!");
        }
    }

    private async Task MarkOutForDelivery(int orderId)
    {
        var success = await ApiService.MarkOrderOutForDeliveryAsync(orderId);
        if (success)
        {
            await RefreshOrders();
            await ShowNotification("Order marked as out for delivery!");
        }
    }

    private async Task CompleteOrder(int orderId)
    {
        var success = await ApiService.CompleteOrderAsync(orderId);
        if (success)
        {
            await RefreshOrders();
            await ShowNotification("Order completed!");
        }
    }

    private async Task CancelOrder(int orderId)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this order?");
        if (confirm)
        {
            var success = await ApiService.CancelOrderAsync(orderId);
            if (success)
            {
                await RefreshOrders();
                await ShowNotification("Order cancelled.");
            }
        }
    }

    private async Task ShowNotification(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    private string GetFilterDisplayName() => currentFilter switch
    {
        OrderFilter.Pending => "Pending",
        OrderFilter.InPreparation => "In Preparation", 
        OrderFilter.Ready => "Ready",
        OrderFilter.OutForDelivery => "Out for Delivery",
        _ => "All"
    };

    private int GetOrderPriority(Order order) => order.Status switch
    {
        OrderStatus.Received => 1,
        OrderStatus.InPreparation => 2,
        OrderStatus.Ready => 3,
        OrderStatus.OutForDelivery => 4,
        _ => 5
    };

    private string GetOrderBorderClass(OrderStatus status) => status switch
    {
        OrderStatus.Received => "border-l-4 border-red-500",
        OrderStatus.InPreparation => "border-l-4 border-orange-500",
        OrderStatus.Ready => "border-l-4 border-blue-500",
        OrderStatus.OutForDelivery => "border-l-4 border-purple-500",
        OrderStatus.Completed => "border-l-4 border-green-500",
        _ => ""
    };

    private string GetOrderHeaderClass(OrderStatus status) => status switch
    {
        OrderStatus.Received => "bg-red-50",
        OrderStatus.InPreparation => "bg-orange-50",
        OrderStatus.Ready => "bg-blue-50",
        OrderStatus.OutForDelivery => "bg-purple-50",
        OrderStatus.Completed => "bg-green-50",
        _ => "bg-gray-50"
    };

    private string GetStatusBadgeClass(OrderStatus status) => status switch
    {
        OrderStatus.Received => "bg-red-100 text-red-800",
        OrderStatus.InPreparation => "bg-orange-100 text-orange-800",
        OrderStatus.Ready => "bg-blue-100 text-blue-800",
        OrderStatus.OutForDelivery => "bg-purple-100 text-purple-800",
        OrderStatus.Completed => "bg-green-100 text-green-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private string GetStatusIcon(OrderStatus status) => status switch
    {
        OrderStatus.Received => "🔴",
        OrderStatus.InPreparation => "🍣",
        OrderStatus.Ready => "📦",
        OrderStatus.OutForDelivery => "🛵",
        OrderStatus.Completed => "✅",
        _ => "❓"
    };

    private string GetTimeAgo(DateTime createdAt)
    {
        var timeSpan = DateTime.Now - createdAt;
        return timeSpan.TotalMinutes switch
        {
            var minutes when minutes < 1 => "just now",
            var minutes when minutes < 60 => $"{(int)timeSpan.TotalMinutes}m ago",
            var minutes when minutes < 1440 => $"{(int)timeSpan.TotalHours}h ago",
            _ => createdAt.ToString("MMM dd")
        };
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
} 