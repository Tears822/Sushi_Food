@page "/ingredient-management"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using HidaSushi.Admin.Services
@inject AdminApiService AdminApiService
@inject NavigationManager Navigation

<PageTitle>Ingredient Management - HIDA SUSHI</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 relative overflow-hidden">
    <!-- Animated background shapes -->
    <div class="absolute inset-0 overflow-hidden">
        <div class="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob"></div>
        <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000"></div>
        <div class="absolute top-40 left-40 w-80 h-80 bg-indigo-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000"></div>
    </div>

    <!-- Header Section -->
    <div class="relative z-10 bg-gradient-to-r from-royal-purple via-pink-primary to-deep-purple shadow-professional">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm animate-bounce">
                        <span class="text-3xl">ü•ï</span>
                    </div>
                <div>
                        <h1 class="text-4xl font-bold text-white mb-2 font-poppins">Ingredient Management</h1>
                        <p class="text-light-purple text-lg font-inter">Control your inventory and ingredient stock</p>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <button @onclick="@(() => Navigation.NavigateTo("/admin"))" 
                            class="bg-white/20 hover:bg-white/30 text-white font-bold py-3 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 backdrop-blur-sm font-poppins cursor-pointer">
                        <span class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                            Back to Dashboard
                        </span>
                    </button>
                    <button @onclick="ShowAddModal" 
                            class="bg-white/20 hover:bg-white/30 text-white font-bold py-3 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 backdrop-blur-sm font-poppins cursor-pointer">
                        <span class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                            Add Ingredient
                        </span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Filter Section -->
        <div class="glass-effect rounded-2xl shadow-professional p-6 mb-8">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-xl font-bold text-white font-poppins">Filter by Category</h3>
                <div class="w-8 h-1 bg-gradient-to-r from-royal-purple to-pink-primary rounded-full"></div>
            </div>
            
            <div class="flex flex-wrap gap-3">
                <button @onclick="() => FilterByCategory(null)" 
                        class="@(selectedCategory == null ? "bg-gradient-to-r from-royal-purple to-pink-primary text-white" : "bg-white/10 text-gray-300 hover:bg-white/20") px-4 py-2 rounded-lg transition-all duration-200 font-inter cursor-pointer">
                    All Categories
                </button>
                @foreach (var category in categories)
                {
                    <button @onclick="() => FilterByCategory(category)" 
                            class="@(selectedCategory == category ? "bg-gradient-to-r from-royal-purple to-pink-primary text-white" : "bg-white/10 text-gray-300 hover:bg-white/20") px-4 py-2 rounded-lg transition-all duration-200 font-inter cursor-pointer">
                        @category.ToString()
                    </button>
                }
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Total Ingredients</p>
                        <p class="text-3xl font-bold text-white font-poppins">@filteredIngredients.Count</p>
                    </div>
                    <div class="w-12 h-12 bg-green-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">ü•ï</span>
                    </div>
                </div>
            </div>
            
            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Available</p>
                        <p class="text-3xl font-bold text-green-400 font-poppins">@filteredIngredients.Count(i => i.IsAvailable)</p>
                    </div>
                    <div class="w-12 h-12 bg-green-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">‚úÖ</span>
            </div>
        </div>
    </div>

            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Low Stock</p>
                        <p class="text-3xl font-bold text-orange-400 font-poppins">@filteredIngredients.Count(i => i.StockQuantity < 10)</p>
                    </div>
                    <div class="w-12 h-12 bg-orange-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">‚ö†Ô∏è</span>
                    </div>
                </div>
            </div>
            
            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Categories</p>
                        <p class="text-3xl font-bold text-blue-400 font-poppins">@categories.Count</p>
                    </div>
                    <div class="w-12 h-12 bg-blue-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">üìÇ</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Ingredients Grid -->
        <div class="glass-effect rounded-2xl shadow-professional p-8">
            <div class="flex items-center justify-between mb-6">
                <h3 class="text-2xl font-bold text-white font-poppins">
                    @if (selectedCategory != null)
                    {
                        @($"{selectedCategory} Ingredients")
        }
        else
                    {
                        @("All Ingredients")
                    }
                </h3>
                <div class="w-12 h-1 bg-gradient-to-r from-royal-purple to-pink-primary rounded-full"></div>
            </div>
            
            @if (isLoading)
            {
                <div class="flex items-center justify-center py-12">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-royal-purple"></div>
                    <span class="ml-3 text-gray-300 font-inter">Loading ingredients...</span>
                </div>
            }
            else if (filteredIngredients.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    @foreach (var ingredient in filteredIngredients)
                {
                        <div class="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 hover:bg-white/20 transition-all duration-300 transform hover:scale-105">
                            <div class="flex items-start justify-between mb-4">
                                <div class="flex-1">
                                    <h4 class="font-bold text-white font-poppins text-lg">@ingredient.Name</h4>
                                    <p class="text-gray-300 font-inter text-sm">@ingredient.Category.ToString()</p>
                                </div>
                                <div class="flex items-center space-x-2">
                                    @if (ingredient.StockQuantity < 10)
                                    {
                                        <span class="bg-red-500/20 text-red-300 text-xs font-semibold px-2 py-1 rounded-full border border-red-500/30 font-inter">Low Stock</span>
                                    }
                                    @if (!ingredient.IsAvailable)
                                    {
                                        <span class="bg-gray-500/20 text-gray-300 text-xs font-semibold px-2 py-1 rounded-full border border-gray-500/30 font-inter">Unavailable</span>
                                    }
                            </div>
                        </div>

                            <div class="space-y-3 mb-4">
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-300 font-inter text-sm">Price:</span>
                                    <span class="text-xl font-bold text-white font-poppins">‚Ç¨@ingredient.AdditionalPrice.ToString("F2")</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-300 font-inter text-sm">Stock:</span>
                                    <span class="text-lg font-semibold @(ingredient.StockQuantity < 10 ? "text-red-400" : "text-green-400") font-poppins">@ingredient.StockQuantity</span>
                                    </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-300 font-inter text-sm">Status:</span>
                                    <div class="flex items-center space-x-2">
                                        <div class="w-3 h-3 @(ingredient.IsAvailable ? "bg-green-500" : "bg-red-500") rounded-full"></div>
                                        <span class="text-sm text-gray-300 font-inter">@(ingredient.IsAvailable ? "Available" : "Unavailable")</span>
                                        </div>
                            </div>
                        </div>

                            <div class="flex items-center justify-between gap-2">
                                <button @onclick="() => EditIngredient(ingredient)" 
                                        class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-3 rounded-lg transition-all duration-200 font-poppins text-sm cursor-pointer">
                                    Edit
                                </button>
                                    <button @onclick="() => ToggleAvailability(ingredient)" 
                                        class="flex-1 @(ingredient.IsAvailable ? "bg-orange-500 hover:bg-orange-600" : "bg-green-500 hover:bg-green-600") text-white font-medium py-2 px-3 rounded-lg transition-all duration-200 font-poppins text-sm cursor-pointer">
                                    @(ingredient.IsAvailable ? "Disable" : "Enable")
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-12">
                    <div class="w-24 h-24 bg-white/10 rounded-full flex items-center justify-center mx-auto mb-4">
                        <span class="text-4xl">ü•ï</span>
                    </div>
                    <h4 class="text-xl font-semibold text-white mb-2 font-poppins">No ingredients found</h4>
                    <p class="text-gray-300 font-inter">@(selectedCategory != null ? $"No {selectedCategory} ingredients available." : "Add your first ingredient to get started!")</p>
                    </div>
                }
            </div>
    </div>
                </div>
                
@if (showEditor)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
        <div class="glass-effect rounded-2xl shadow-professional w-full max-w-md mx-4 p-6">
            <h3 class="text-xl font-bold text-white font-poppins mb-4">@(editingIngredient.Id > 0 ? "Edit Ingredient" : "Add New Ingredient")</h3>
                    <div class="space-y-4">
                        <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Name</label>
                    <input class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-gray-400" @bind="editingIngredient.Name" placeholder="Ingredient name" />
                        </div>
                        <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Category</label>
                    <select class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white" @bind="editingIngredient.Category">
                        @foreach (var category in categories)
                                {
                            <option value="@category" class="bg-gray-800 text-white">@category.ToString()</option>
                                }
                            </select>
                        </div>
                        <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Price (‚Ç¨)</label>
                    <input type="number" step="0.01" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white" @bind-value="editingIngredient.AdditionalPrice" @bind-value:event="onchange" />
                        </div>
                        <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Stock</label>
                    <input type="number" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white" @bind-value="editingIngredient.StockQuantity" @bind-value:event="onchange" />
                </div>
                <div class="flex items-center space-x-2">
                    <input type="checkbox" @bind="editingIngredient.IsAvailable" id="available-checkbox" class="rounded" />
                    <label for="available-checkbox" class="text-gray-300">Available</label>
                </div>
                        </div>
            <div class="mt-6 flex justify-end space-x-3">
                <button class="px-4 py-2 rounded-lg bg-white/10 hover:bg-white/20 text-gray-300 hover:text-white hover:scale-105 hover:shadow-lg transition-all duration-300 ease-in-out transform active:scale-95 cursor-pointer" @onclick="CloseEditor">Cancel</button>
                <button class="px-4 py-2 rounded-lg bg-gradient-to-r from-royal-purple to-pink-primary text-white hover:from-royal-purple/80 hover:to-pink-primary/80 hover:scale-105 hover:shadow-xl hover:shadow-royal-purple/30 transition-all duration-300 ease-in-out transform active:scale-95 cursor-pointer" @onclick="SaveIngredient">Save</button>
                        </div>
                        </div>
                    </div>
}

<!-- Success Toast Notification -->
@if (showSuccessToast)
{
    <div class="fixed top-4 right-4 z-50 transform transition-all duration-500 ease-in-out @(showSuccessToast ? "translate-x-0 opacity-100" : "translate-x-full opacity-0")">
        <div class="@(isSuccessToast ? "bg-gradient-to-r from-green-500 to-emerald-600" : "bg-gradient-to-r from-red-500 to-red-600") text-white px-6 py-4 rounded-lg shadow-xl border @(isSuccessToast ? "border-green-400/20" : "border-red-400/20") backdrop-blur-sm">
            <div class="flex items-center space-x-3">
                <div class="w-6 h-6 bg-white/20 rounded-full flex items-center justify-center">
                    @if (isSuccessToast)
                    {
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                    }
                    else
                    {
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    }
                </div>
                <div>
                    <p class="font-semibold font-poppins">@toastMessage</p>
                    <p class="text-sm @(isSuccessToast ? "text-green-100" : "text-red-100") font-inter">@(isSuccessToast ? "Changes saved successfully" : "Please try again")</p>
                    </div>
                </div>
            </div>
        </div>
    }

@implements IDisposable
@code {
    private List<Ingredient> ingredients = new();
    private List<Ingredient> filteredIngredients = new();
    private List<IngredientCategory> categories = new();
    private IngredientCategory? selectedCategory = null;
    private bool isLoading = true;
    private bool showEditor = false;
    private Ingredient editingIngredient = new();
    private bool showSuccessToast = false;
    private bool isSuccessToast = true;
    private string toastMessage = "";
    private Timer? toastTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadIngredientData();
    }

    private async Task LoadIngredientData()
    {
        try
        {
            isLoading = true;
            ingredients = await AdminApiService.GetIngredientsAsync();
            categories = Enum.GetValues<IngredientCategory>().ToList();
            FilterByCategory(selectedCategory);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading ingredient data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterByCategory(IngredientCategory? category)
    {
        selectedCategory = category;
        if (category == null)
    {
            filteredIngredients = ingredients;
        }
        else
        {
            filteredIngredients = ingredients.Where(i => i.Category == category).ToList();
        }
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        editingIngredient = new Ingredient();
        showEditor = true;
    }

    private void EditIngredient(Ingredient ingredient)
    {
        editingIngredient = new Ingredient
        {
            Id = ingredient.Id,
            Name = ingredient.Name,
            Category = ingredient.Category,
            AdditionalPrice = ingredient.AdditionalPrice,
            StockQuantity = ingredient.StockQuantity,
            IsAvailable = ingredient.IsAvailable
        };
        showEditor = true;
    }

    private void CloseEditor()
    {
        showEditor = false;
    }

    private async Task SaveIngredient()
    {
        var saved = await AdminApiService.SaveIngredientAsync(editingIngredient);
        if (saved != null)
        {
            var idx = ingredients.FindIndex(i => i.Id == saved.Id);
            if (idx >= 0) ingredients[idx] = saved; else ingredients.Add(saved);
            showEditor = false;
            FilterByCategory(selectedCategory);
            
            // Show success toast
            toastMessage = editingIngredient.Id > 0 ? "Ingredient updated successfully!" : "Ingredient created successfully!";
            showSuccessToast = true;
            isSuccessToast = true;
            StateHasChanged();
            
            // Hide toast after 3 seconds
            toastTimer?.Dispose(); // Clean up any existing timer
            toastTimer = new Timer(async _ =>
            {
                showSuccessToast = false;
                await InvokeAsync(StateHasChanged);
                toastTimer?.Dispose();
            }, null, 3000, Timeout.Infinite);
            }
            else
            {
            // Show error toast if save failed
            toastMessage = "Failed to save ingredient";
            showSuccessToast = true;
            isSuccessToast = false;
            StateHasChanged();
            
            // Hide error toast after 3 seconds
            toastTimer?.Dispose();
            toastTimer = new Timer(async _ =>
            {
                showSuccessToast = false;
                await InvokeAsync(StateHasChanged);
                toastTimer?.Dispose();
            }, null, 3000, Timeout.Infinite);
        }
    }

    private async Task ToggleAvailability(Ingredient ingredient)
    {
        try
        {
            var ok = await AdminApiService.ToggleIngredientAvailabilityAsync(ingredient.Id);
            if (ok)
            {
                ingredient.IsAvailable = !ingredient.IsAvailable;
            }
            else
            {
                Console.WriteLine("Toggle ingredient availability failed");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling ingredient availability: {ex.Message}");
        }
    }

    public void Dispose()
    {
        toastTimer?.Dispose();
    }
} 