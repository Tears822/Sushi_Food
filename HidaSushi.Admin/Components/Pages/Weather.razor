@page "/weather"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using HidaSushi.Admin.Services
@inject IWeatherService WeatherService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Weather Forecast - HIDA SUSHI</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 relative overflow-hidden">
    <!-- Animated background shapes -->
    <div class="absolute inset-0 overflow-hidden">
        <div class="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob"></div>
        <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000"></div>
        <div class="absolute top-40 left-40 w-80 h-80 bg-indigo-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000"></div>
    </div>

    <!-- Header Section -->
    <div class="relative z-10 bg-gradient-to-r from-royal-purple via-pink-primary to-deep-purple shadow-professional">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm animate-bounce">
                        <span class="text-3xl">🌤️</span>
                    </div>
                    <div>
                        <h1 class="text-4xl font-bold text-white mb-2 font-poppins">Weather Forecast</h1>
                        <p class="text-light-purple text-lg font-inter">
                            @if (currentWeather != null)
                            {
                                <span>@currentWeather.City, @currentWeather.Country - Last updated: @currentWeather.LastUpdated.ToString("HH:mm")</span>
                            }
                            else
                            {
                                <span>Local weather conditions for delivery planning</span>
                            }
                        </p>
                    </div>
                </div>
                <div class="hidden md:flex items-center space-x-4">
                    <button @onclick="RefreshWeather" 
                            class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 backdrop-blur-sm font-poppins cursor-pointer mr-4">
                        <span class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                            Refresh
                        </span>
                    </button>
                    <button @onclick="@(() => Navigation.NavigateTo("/admin"))" 
                            class="bg-white/20 hover:bg-white/30 text-white font-bold py-3 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 backdrop-blur-sm font-poppins cursor-pointer">
                        <span class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                            </svg>
                            Back to Dashboard
                        </span>
                    </button>
                    <div class="text-right text-white">
                        <p class="text-sm opacity-80 font-inter">@DateTime.Now.ToString("MMMM dd, yyyy")</p>
                        <p class="text-lg font-semibold font-poppins">@DateTime.Now.ToString("HH:mm")</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        @if (isLoading)
        {
            <!-- Loading State -->
            <div class="flex justify-center items-center py-20">
                <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-white"></div>
            </div>
        }
        else if (currentWeather != null)
        {
            <!-- Current Weather Card -->
            <div class="bg-white/90 backdrop-blur-lg rounded-3xl shadow-2xl p-8 mb-8 border border-gray-200/50">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-3xl font-bold text-gray-900">Current Weather</h2>
                    <div class="flex items-center space-x-4">
                        <img src="https://openweathermap.org/img/wn/@(currentWeather.Icon)@@2x.png" 
                             alt="@currentWeather.Description" class="w-16 h-16">
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6">
                    <!-- Temperature -->
                    <div class="text-center">
                        <div class="text-4xl font-bold text-blue-600 mb-2">@currentWeather.Temperature°C</div>
                        <div class="text-gray-600">Temperature</div>
                        <div class="text-sm text-gray-500">Feels like @currentWeather.FeelsLike°C</div>
                    </div>

                    <!-- Humidity -->
                    <div class="text-center">
                        <div class="text-3xl font-bold text-cyan-600 mb-2">@currentWeather.Humidity%</div>
                        <div class="text-gray-600">Humidity</div>
                    </div>

                    <!-- Wind -->
                    <div class="text-center">
                        <div class="text-3xl font-bold text-green-600 mb-2">@currentWeather.WindSpeed.ToString("F1") m/s</div>
                        <div class="text-gray-600">Wind Speed</div>
                    </div>

                    <!-- Pressure -->
                    <div class="text-center">
                        <div class="text-3xl font-bold text-purple-600 mb-2">@currentWeather.Pressure hPa</div>
                        <div class="text-gray-600">Pressure</div>
                    </div>

                    <!-- Visibility -->
                    <div class="text-center">
                        <div class="text-3xl font-bold text-orange-600 mb-2">@currentWeather.Visibility.ToString("F1") km</div>
                        <div class="text-gray-600">Visibility</div>
                    </div>
                </div>

                <div class="mt-6 p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-xl">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-900 capitalize">@currentWeather.Description</h3>
                            <p class="text-gray-600">Current conditions in @currentWeather.City</p>
                        </div>
                        <div class="text-right text-sm text-gray-600">
                            <p>🌅 Sunrise: @currentWeather.Sunrise.ToString("HH:mm")</p>
                            <p>🌇 Sunset: @currentWeather.Sunset.ToString("HH:mm")</p>
                        </div>
                    </div>
                </div>
            </div>

            @if (forecastData?.Any() == true)
            {
                <!-- 5-Day Forecast -->
                <div class="bg-white/90 backdrop-blur-lg rounded-3xl shadow-2xl p-8 border border-gray-200/50">
                    <h2 class="text-3xl font-bold text-gray-900 mb-6">5-Day Forecast</h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                        @foreach (var forecast in forecastData.Where(f => f.DateTime.Hour == 12).Take(5))
                        {
                            <div class="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-4 text-center hover:shadow-lg transition-shadow">
                                <div class="text-lg font-semibold text-gray-900 mb-2">
                                    @forecast.DateTime.ToString("ddd")
                                </div>
                                <div class="text-sm text-gray-600 mb-3">
                                    @forecast.DateTime.ToString("MMM dd")
                                </div>
                                <img src="https://openweathermap.org/img/wn/@(forecast.Icon).png" 
                                     alt="@forecast.Description" class="w-12 h-12 mx-auto mb-2">
                                <div class="text-xl font-bold text-blue-600 mb-1">
                                    @forecast.Temperature°C
                                </div>
                                <div class="text-sm text-gray-600 capitalize mb-2">
                                    @forecast.Description
                                </div>
                                <div class="text-xs text-gray-500">
                                    💧 @forecast.Humidity% | 💨 @forecast.WindSpeed.ToString("F1") m/s
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <!-- Error State -->
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-xl text-center">
                <h3 class="text-lg font-bold mb-2">Unable to load weather data</h3>
                <p>Please check your internet connection and try again.</p>
                <button @onclick="RefreshWeather" 
                        class="mt-4 bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                    Try Again
                </button>
            </div>
        }
    </div>
</div>

@code {
    private WeatherData? currentWeather;
    private List<ForecastData>? forecastData;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
    }

    private async Task LoadWeatherData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Load current weather and forecast in parallel
            var currentWeatherTask = WeatherService.GetCurrentWeatherAsync();
            var forecastTask = WeatherService.GetWeatherForecastAsync();

            await Task.WhenAll(currentWeatherTask, forecastTask);

            currentWeather = await currentWeatherTask;
            forecastData = await forecastTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshWeather()
    {
        await LoadWeatherData();
    }
}
