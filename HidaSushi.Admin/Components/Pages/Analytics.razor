@page "/analytics"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using HidaSushi.Admin.Services
@inject IAdminApiService AdminApiService
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthStateProvider

<PageTitle>Analytics Dashboard - HIDA SUSHI</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 relative overflow-hidden">
    <!-- Animated background shapes -->
    <div class="absolute inset-0 overflow-hidden">
        <div class="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob"></div>
        <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000"></div>
        <div class="absolute top-40 left-40 w-80 h-80 bg-indigo-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000"></div>
    </div>

    <!-- Header Section -->
    <div class="relative z-10 bg-gradient-to-r from-royal-purple via-pink-primary to-deep-purple shadow-professional">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm animate-bounce">
                        <span class="text-3xl">üìà</span>
                    </div>
                    <div>
                        <h1 class="text-4xl font-bold text-white mb-2 font-poppins">Analytics Dashboard</h1>
                        <p class="text-light-purple text-lg font-inter">Business insights and performance metrics</p>
                    </div>
                </div>
                <div class="hidden md:flex items-center space-x-4">
                    <button @onclick="@(() => Navigation.NavigateTo("/admin"))" 
                            class="bg-white/20 hover:bg-white/30 text-white font-bold py-3 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 backdrop-blur-sm font-poppins cursor-pointer">
                        <span class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                            </svg>
                            Back to Dashboard
                        </span>
                    </button>
                    <div class="text-right text-white">
                        <p class="text-sm opacity-80 font-inter">@DateTime.Now.ToString("MMMM dd, yyyy")</p>
                        <p class="text-lg font-semibold font-poppins">@DateTime.Now.ToString("HH:mm")</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Key Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Total Revenue</p>
                        <p class="text-3xl font-bold text-white font-poppins">‚Ç¨@stats.TodayRevenue.ToString("F2")</p>
                        <p class="text-sm text-green-400 mt-1 font-inter">
                            <span class="flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                </svg>
                                +12% from last month
                            </span>
                        </p>
                    </div>
                    <div class="w-12 h-12 bg-green-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">üí∞</span>
                    </div>
                </div>
            </div>
            
            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Total Orders</p>
                        <p class="text-3xl font-bold text-white font-poppins">@stats.TotalOrders</p>
                        <p class="text-sm text-blue-400 mt-1 font-inter">
                            <span class="flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                </svg>
                                +8% this week
                            </span>
                        </p>
                    </div>
                    <div class="w-12 h-12 bg-blue-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">üìä</span>
                    </div>
                </div>
            </div>
            
            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Menu Items</p>
                        <p class="text-3xl font-bold text-white font-poppins">@stats.TotalMenuItems</p>
                        <p class="text-sm text-purple-400 mt-1 font-inter">
                            <span class="flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v3.586L7.707 9.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 10.586V7z" clip-rule="evenodd"></path>
                                </svg>
                                3 new this week
                            </span>
                        </p>
                    </div>
                    <div class="w-12 h-12 bg-purple-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">üç£</span>
                    </div>
                </div>
            </div>
            
            <div class="glass-effect rounded-2xl shadow-professional p-6 transform transition-all duration-300 hover:scale-105 hover-glow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-300 font-inter">Pending Orders</p>
                        <p class="text-3xl font-bold text-white font-poppins">@stats.PendingOrders</p>
                        <p class="text-sm text-orange-400 mt-1 font-inter">
                            <span class="flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                                </svg>
                                Needs attention
                            </span>
                        </p>
                    </div>
                    <div class="w-12 h-12 bg-orange-500/30 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <span class="text-2xl">‚è∞</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Sales Trend -->
            <div class="glass-effect rounded-2xl shadow-professional p-8">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-2xl font-bold text-white font-poppins">Sales Trend</h3>
                    <div class="w-12 h-1 bg-gradient-to-r from-royal-purple to-pink-primary rounded-full"></div>
                </div>
                
                <!-- Simple text-based chart placeholder -->
                <div class="space-y-4">
                    @foreach (var day in GetWeeklyData())
                    {
                        <div class="flex items-center justify-between">
                            <span class="text-gray-300 font-inter">@day.Day</span>
                            <div class="flex-1 mx-4">
                                <div class="bg-white/10 rounded-full h-2">
                                    <div class="bg-gradient-to-r from-royal-purple to-pink-primary h-2 rounded-full transition-all duration-500" 
                                         style="width: @(day.Percentage)%"></div>
                                </div>
                            </div>
                            <span class="text-white font-bold font-poppins">‚Ç¨@day.Amount.ToString("F0")</span>
                        </div>
                    }
                </div>
            </div>

            <!-- Top Items -->
            <div class="glass-effect rounded-2xl shadow-professional p-8">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-2xl font-bold text-white font-poppins">Top Selling Items</h3>
                    <div class="w-12 h-1 bg-gradient-to-r from-royal-purple to-pink-primary rounded-full"></div>
                </div>
                
                <div class="space-y-4">
                    @foreach (var item in GetTopItems())
                    {
                        <div class="flex items-center justify-between p-3 bg-white/5 rounded-lg hover:bg-white/10 transition-colors">
                            <div class="flex items-center space-x-3">
                                <div class="w-8 h-8 bg-gradient-to-r from-royal-purple to-pink-primary rounded-full flex items-center justify-center">
                                    <span class="text-white text-sm font-bold">@item.Rank</span>
                                </div>
                                <div>
                                    <p class="font-medium text-white font-inter">@item.Name</p>
                                    <p class="text-sm text-gray-300 font-inter">@item.OrderCount orders</p>
                                </div>
                            </div>
                            <span class="text-green-400 font-bold font-poppins">‚Ç¨@item.Revenue.ToString("F0")</span>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="glass-effect rounded-2xl shadow-professional p-8">
            <div class="flex items-center justify-between mb-6">
                <h3 class="text-2xl font-bold text-white font-poppins">Recent Activity</h3>
                <div class="w-12 h-1 bg-gradient-to-r from-royal-purple to-pink-primary rounded-full"></div>
            </div>
            
            <div class="space-y-4">
                @foreach (var activity in GetRecentActivity())
                {
                    <div class="flex items-center space-x-4 p-3 bg-white/5 rounded-lg hover:bg-white/10 transition-colors">
                        <div class="w-10 h-10 bg-gradient-to-r from-royal-purple to-pink-primary rounded-full flex items-center justify-center">
                            <span class="text-white">@activity.Icon</span>
                        </div>
                        <div class="flex-1">
                            <p class="text-white font-inter">@activity.Description</p>
                            <p class="text-sm text-gray-400 font-inter">@activity.Time</p>
                        </div>
                        <span class="text-gray-300 text-sm font-inter">@activity.Value</span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private DashboardStats stats = new();
    private DailyAnalytics dailyAnalytics = new();

    protected override async Task OnInitializedAsync()
    {
        // First, ensure the AdminApiService has the JWT token
        await EnsureAuthTokenIsSet();
        await LoadAnalyticsData();
    }

    private async Task LoadAnalyticsData()
    {
        try
        {
            // Get real analytics data from backend
            var apiResult = await AdminApiService.GetDailyAnalyticsAsync(DateTime.Today);
            dailyAnalytics = apiResult ?? new DailyAnalytics();
            
            // Map to dashboard stats for compatibility
            stats = new DashboardStats
            {
                TotalOrders = dailyAnalytics.TotalOrders,
                TodayRevenue = dailyAnalytics.TotalRevenue,
                TotalMenuItems = 42, // This would need a separate endpoint
                PendingOrders = 0 // This would need to be calculated differently
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading analytics data: {ex.Message}");
            // Mock data fallback
            stats = new DashboardStats
            {
                TotalOrders = 156,
                TodayRevenue = 2489.50m,
                TotalMenuItems = 42,
                PendingOrders = 8
            };
            dailyAnalytics = new DailyAnalytics
            {
                TotalOrders = 156,
                TotalRevenue = 2489.50m,
                CompletedOrders = 140,
                AverageOrderValue = 15.95m
            };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task EnsureAuthTokenIsSet()
    {
        try
        {
            var token = await AuthStateProvider.GetTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                Console.WriteLine($"Setting auth token on AdminApiService (Analytics): {token.Substring(0, Math.Min(10, token.Length))}...");
                AdminApiService.SetAuthToken(token);
            }
            else
            {
                Console.WriteLine("No auth token found in authentication state");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error ensuring auth token is set: {ex.Message}");
        }
    }

    private List<(string Day, decimal Amount, int Percentage)> GetWeeklyData()
    {
        // Use hourly data from backend if available, otherwise mock
        if (dailyAnalytics.HourlyOrderCounts?.Any() == true)
        {
            var maxCount = dailyAnalytics.HourlyOrderCounts.Values.Max();
            return dailyAnalytics.HourlyOrderCounts.Take(7).Select(h => (
                $"{h.Key:00}:00",
                (decimal)(h.Value * 25), // Estimate revenue from order count
                maxCount > 0 ? (int)((h.Value / (double)maxCount) * 100) : 0
            )).ToList();
        }
        
        return new List<(string, decimal, int)>
        {
            ("Monday", 420m, 70),
            ("Tuesday", 380m, 63),
            ("Wednesday", 510m, 85),
            ("Thursday", 460m, 77),
            ("Friday", 600m, 100),
            ("Saturday", 580m, 97),
            ("Sunday", 340m, 57)
        };
    }

    private List<(int Rank, string Name, int OrderCount, decimal Revenue)> GetTopItems()
    {
        // Use real popular rolls from backend if available
        if (dailyAnalytics.PopularRolls?.Any() == true)
        {
            return dailyAnalytics.PopularRolls.Select((item, index) => (
                index + 1,
                item.Name,
                item.Count,
                item.Revenue
            )).ToList();
        }
        
        return new List<(int, string, int, decimal)>
        {
            (1, "Dragon Roll", 45, 1350m),
            (2, "California Roll", 38, 950m),
            (3, "Salmon Teriyaki", 32, 800m),
            (4, "Spicy Tuna Roll", 28, 700m),
            (5, "Rainbow Roll", 24, 720m)
        };
    }

    private List<(string Icon, string Description, string Time, string Value)> GetRecentActivity()
    {
        return new List<(string, string, string, string)>
        {
            ("üìä", "New order placed", "2 minutes ago", "‚Ç¨24.50"),
            ("üç£", "Menu item updated: Dragon Roll", "15 minutes ago", ""),
            ("‚úÖ", "Order #12345 completed", "23 minutes ago", "‚Ç¨18.90"),
            ("üë§", "New customer registration", "1 hour ago", ""),
            ("üí∞", "Payment processed", "1.5 hours ago", "‚Ç¨42.30")
        };
    }
} 