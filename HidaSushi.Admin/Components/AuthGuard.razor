@using HidaSushi.Shared.Models
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@if (isAuthenticated)
{
    @ChildContent
}
else if (isLoading)
{
    <div class="min-h-screen flex items-center justify-center bg-gray-50">
        <div class="text-center">
            <div class="text-6xl mb-4">üç£</div>
            <h2 class="text-2xl font-bold text-gray-900 mb-2">HIDA SUSHI</h2>
            <p class="text-gray-600">Checking authentication...</p>
            <div class="mt-4">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
            </div>
        </div>
    </div>
}
else
{
    <!-- Redirect to login will happen automatically -->
    <div class="min-h-screen flex items-center justify-center bg-gray-50">
        <div class="text-center">
            <div class="text-6xl mb-4">üîê</div>
            <h2 class="text-2xl font-bold text-gray-900 mb-2">Access Denied</h2>
            <p class="text-gray-600">Redirecting to login...</p>
        </div>
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private bool isAuthenticated = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
    }

    private async Task CheckAuthentication()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "adminToken");
            
            if (string.IsNullOrEmpty(token))
            {
                RedirectToLogin();
                return;
            }

            // Validate token with the API
            var httpClient = HttpClientFactory.CreateClient("AuthClient");
            httpClient.DefaultRequestHeaders.Authorization = 
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.GetAsync("api/Auth/validate");
            
            if (response.IsSuccessStatusCode)
            {
                isAuthenticated = true;
                Console.WriteLine("‚úÖ Admin authentication validated");
            }
            else
            {
                // Token is invalid, remove it and redirect
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "adminToken");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "adminUsername");
                RedirectToLogin();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Authentication check failed: {ex.Message}");
            RedirectToLogin();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void RedirectToLogin()
    {
        Console.WriteLine("‚ùå Authentication failed, redirecting to login");
        Navigation.NavigateTo("/login", forceLoad: true);
    }
} 