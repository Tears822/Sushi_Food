@page "/login"
@page "/register"
@using HidaSushi.Client.Services
@using HidaSushi.Shared.Models
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject IJSRuntime JSRuntime
@inject IApiService ApiService
@inject IToastService ToastService
@inherits FlowbitePage

<PageTitle>@(isRegisterMode ? "Register" : "Login") - HIDA SUSHI</PageTitle>

<!-- Login/Register Page with 3D Design and Better Text Visibility -->
<div class="min-h-screen bg-gradient-to-br from-purple-900 via-purple-700 to-pink-600 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
    
    <!-- Animated Background Elements -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute -top-10 -left-10 w-32 h-32 bg-white bg-opacity-10 rounded-full animate-pulse"></div>
        <div class="absolute top-1/3 -right-10 w-24 h-24 bg-pink-300 bg-opacity-20 rounded-full animate-bounce"></div>
        <div class="absolute bottom-20 left-1/4 w-16 h-16 bg-purple-300 bg-opacity-15 rounded-full animate-ping"></div>
        <div class="absolute top-20 left-1/3 w-12 h-12 bg-white bg-opacity-10 rounded-full animate-pulse delay-300"></div>
    </div>

    <div class="max-w-md w-full space-y-8 relative z-10">
        
        <!-- Header with 3D Effect -->
        <div class="text-center">
            <div class="transform hover:scale-110 transition-transform duration-300">
                <!-- 3D Sushi Icon -->
                <div class="mx-auto w-24 h-24 mb-6 relative">
                    <div class="absolute inset-0 bg-gradient-to-br from-orange-400 to-red-500 rounded-2xl transform rotate-3 shadow-2xl"></div>
                    <div class="relative bg-gradient-to-br from-orange-300 to-red-400 rounded-2xl p-4 shadow-xl">
                        <div class="text-4xl transform hover:rotate-12 transition-transform duration-300">üç£</div>
                    </div>
                </div>
            </div>
            
            <h2 class="text-4xl font-bold text-white mb-2 font-poppins drop-shadow-lg">
                @(isRegisterMode ? "Join HIDA SUSHI!" : "Welcome Back!")
            </h2>
            <p class="text-white text-lg drop-shadow">
                @(isRegisterMode ? "Create your account to start ordering" : "Sign in to your HIDA SUSHI account")
            </p>
        </div>

        <!-- Toggle Buttons with Better Visibility -->
        <div class="flex bg-black bg-opacity-30 backdrop-blur-lg rounded-2xl p-1 mb-6 border border-white border-opacity-20">
            <button @onclick="() => SetMode(false)" 
                    class="@(isRegisterMode ? "text-white hover:text-gray-200" : "bg-white text-gray-900 shadow-lg font-semibold") flex-1 py-3 px-4 rounded-xl font-medium transition-all duration-300 transform hover:scale-105">
                Sign In
            </button>
            <button @onclick="() => SetMode(true)" 
                    class="@(!isRegisterMode ? "text-white hover:text-gray-200" : "bg-white text-gray-900 shadow-lg font-semibold") flex-1 py-3 px-4 rounded-xl font-medium transition-all duration-300 transform hover:scale-105">
                Register
            </button>
        </div>

        <!-- Login/Register Form with Better Visibility -->
        <div class="bg-white rounded-3xl p-8 shadow-2xl border border-gray-200">
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mb-6 p-4 bg-red-100 border border-red-300 rounded-xl text-red-800 text-sm">
                    <div class="flex items-center">
                        <svg class="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                        </svg>
                        <span class="font-medium">@errorMessage</span>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="mb-6 p-4 bg-green-100 border border-green-300 rounded-xl text-green-800 text-sm">
                    <div class="flex items-center">
                        <svg class="w-5 h-5 mr-3" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                        </svg>
                        <span class="font-medium">@successMessage</span>
                    </div>
                </div>
            }

            <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true" class="space-y-6">
                
                @if (isRegisterMode)
                {
                    <!-- Full Name Field -->
                    <div class="group">
                        <label for="fullName" class="block text-sm font-semibold text-gray-700 mb-2">
                            <svg class="w-4 h-4 inline mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                            </svg>
                            Full Name
                        </label>
                        <input @bind="fullName" id="fullName" type="text" required 
                               class="appearance-none relative block w-full px-4 py-3 bg-gray-50 border-2 border-gray-300 placeholder-gray-500 text-gray-900 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300 font-medium" 
                               placeholder="Enter your full name" />
                    </div>
                }

                <!-- Email Field -->
                <div class="group">
                    <label for="email" class="block text-sm font-semibold text-gray-700 mb-2">
                        <svg class="w-4 h-4 inline mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                        </svg>
                        Email Address
                    </label>
                    <input @bind="email" id="email" type="email" autocomplete="email" required 
                           class="appearance-none relative block w-full px-4 py-3 bg-gray-50 border-2 border-gray-300 placeholder-gray-500 text-gray-900 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300 font-medium" 
                           placeholder="Enter your email"
                           @onkeypress="HandleKeyPress" />
                </div>

                <!-- Password Field -->
                <div class="group">
                    <label for="password" class="block text-sm font-semibold text-gray-700 mb-2">
                        <svg class="w-4 h-4 inline mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
                        </svg>
                        Password
                    </label>
                    <input @bind="password" id="password" type="password" autocomplete="@(isRegisterMode ? "new-password" : "current-password")" required 
                           class="appearance-none relative block w-full px-4 py-3 bg-gray-50 border-2 border-gray-300 placeholder-gray-500 text-gray-900 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300 font-medium" 
                           placeholder="@(isRegisterMode ? "Create a password" : "Enter your password")"
                           @onkeypress="HandleKeyPress" />
                </div>

                @if (isRegisterMode)
                {
                    <!-- Confirm Password Field -->
                    <div class="group">
                        <label for="confirmPassword" class="block text-sm font-semibold text-gray-700 mb-2">
                            <svg class="w-4 h-4 inline mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                            Confirm Password
                        </label>
                        <input @bind="confirmPassword" id="confirmPassword" type="password" autocomplete="new-password" required 
                               class="appearance-none relative block w-full px-4 py-3 bg-gray-50 border-2 border-gray-300 placeholder-gray-500 text-gray-900 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300 font-medium" 
                               placeholder="Confirm your password" />
                    </div>
                    
                    <!-- Terms Checkbox -->
                    <div class="flex items-center">
                        <input @bind="acceptTerms" id="accept-terms" type="checkbox" 
                               class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded" />
                        <label for="accept-terms" class="ml-2 block text-sm text-gray-700 font-medium">
                            I agree to the <a href="/terms" class="text-purple-600 hover:text-purple-800 underline font-semibold">Terms</a> and <a href="/privacy" class="text-purple-600 hover:text-purple-800 underline font-semibold">Privacy Policy</a>
                        </label>
                    </div>
                }
                else
                {
                    <!-- Remember Me -->
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <input @bind="rememberMe" id="remember-me" type="checkbox" 
                                   class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded" />
                            <label for="remember-me" class="ml-2 block text-sm text-gray-700 font-medium">
                                Remember me
                            </label>
                        </div>
                        <a href="/forgot-password" class="text-sm text-purple-600 hover:text-purple-800 font-semibold transition-colors duration-200">
                            Forgot password?
                        </a>
                    </div>
                }

                <!-- Submit Button -->
                <div>
                    <button type="submit" disabled="@isLoading"
                            class="group relative w-full flex justify-center py-4 px-6 border border-transparent text-lg font-bold rounded-xl text-white bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-105 transition-all duration-300 shadow-2xl hover:shadow-purple-500/25">
                        
                        @if (isLoading)
                        {
                            <div class="flex items-center">
                                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3"></div>
                                <span>@(isRegisterMode ? "Creating Account..." : "Signing In...")</span>
                            </div>
                        }
                        else
                        {
                            <div class="flex items-center">
                                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(isRegisterMode ? "M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" : "M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1")"/>
                                </svg>
                                <span>@(isRegisterMode ? "Create Account" : "Sign In")</span>
                            </div>
                        }
                    </button>
                </div>
            </form>

            @if (!isRegisterMode)
            {
                <!-- Demo Credentials -->
                <div class="mt-8 p-4 bg-blue-50 border border-blue-200 rounded-xl">
                    <h4 class="text-sm font-bold text-blue-800 mb-2">
                        <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clip-rule="evenodd"/>
                        </svg>
                        Demo Credentials:
                    </h4>
                    <div class="text-sm text-blue-700 space-y-1 font-medium">
                        <p><strong>Email:</strong> demo@hidasushi.net</p>
                        <p><strong>Password:</strong> demo123</p>
                    </div>
                    <button @onclick="FillDemoCredentials"
                            class="mt-2 text-xs text-blue-600 hover:text-blue-800 underline font-semibold transition-colors duration-200">
                        Click to auto-fill
                    </button>
                </div>

                <!-- Guest Access -->
                <div class="mt-6 text-center">
                    <button @onclick="ContinueAsGuest"
                            class="text-sm text-purple-600 hover:text-purple-800 font-semibold transition-colors duration-200 underline">
                        Continue as Guest ‚Üí
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool isRegisterMode = false;
    private string email = "";
    private string password = "";
    private string fullName = "";
    private string phone = "";
    private string confirmPassword = "";
    private bool acceptTerms = false;
    private bool rememberMe = false;
    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";

    protected override void OnInitialized()
    {
        try
        {
            // Check if we're on the register route
            isRegisterMode = Navigation.Uri.Contains("/register");
            Logger.LogInformation("Auth page initialized - Register mode: {IsRegister}", isRegisterMode);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing auth page");
        }
    }

    private void SetMode(bool registerMode)
    {
        isRegisterMode = registerMode;
        errorMessage = "";
        successMessage = "";
        
        // Update URL without navigation
        var newUrl = isRegisterMode ? "/register" : "/login";
        Navigation.NavigateTo(newUrl, false);
    }

    private async Task HandleSubmit()
    {
        if (isRegisterMode)
        {
            await HandleRegister();
        }
        else
        {
            await HandleLogin();
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
            {
                errorMessage = "Please enter both email and password.";
                return;
            }

            isLoading = true;
            errorMessage = "";
            StateHasChanged();

            Logger.LogInformation("Attempting login for email: {Email}", email);

            var loginRequest = new LoginRequest
            {
                Username = email,
                Password = password
            };

            var response = await ApiService.LoginAsync(loginRequest);

            if (response.Success && !string.IsNullOrEmpty(response.Token))
            {
                Logger.LogInformation("Login successful for {Email}", email);
                
                // Store authentication state
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", response.Token);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isAuthenticated", "true");
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userEmail", email);
                
                ToastService.ShowSuccess("Login Successful! üç£", $"Welcome back to HIDA SUSHI!");
                
                await Task.Delay(1000);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = response.Message ?? "Invalid email or password.";
                Logger.LogWarning("Failed login attempt for email: {Email}", email);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login");
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            errorMessage = "";
            successMessage = "";

            if (string.IsNullOrWhiteSpace(fullName) || string.IsNullOrWhiteSpace(email) || 
                string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(confirmPassword))
            {
                errorMessage = "Please fill in all required fields.";
                return;
            }

            if (password != confirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            if (password.Length < 6)
            {
                errorMessage = "Password must be at least 6 characters long.";
                return;
            }

            if (!acceptTerms)
            {
                errorMessage = "Please accept the Terms of Service and Privacy Policy.";
                return;
            }

            if (!IsValidEmail(email))
            {
                errorMessage = "Please enter a valid email address.";
                return;
            }

            isLoading = true;
            StateHasChanged();

            Logger.LogInformation("Attempting registration for email: {Email}", email);

            var registerRequest = new RegisterRequest
            {
                FullName = fullName,
                Email = email,
                Password = password,
                Phone = phone
            };

            var response = await ApiService.RegisterAsync(registerRequest);

            if (response.Success)
            {
                Logger.LogInformation("Registration successful for {Email}", email);
                
                ToastService.ShowSuccess("Registration Successful! üéâ", "You can now sign in with your credentials.");
                
                // Clear form and switch to login
                fullName = "";
                email = "";
                phone = "";
                password = "";
                confirmPassword = "";
                acceptTerms = false;
                
                await Task.Delay(1500);
                SetMode(false);
            }
            else
            {
                errorMessage = response.Message ?? "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during registration");
            errorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await HandleSubmit();
        }
    }

    private void FillDemoCredentials()
    {
        email = "demo@hidasushi.net";
        password = "demo123";
        StateHasChanged();
    }

    private void ContinueAsGuest()
    {
        Logger.LogInformation("User continued as guest");
        Navigation.NavigateTo("/");
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
} 