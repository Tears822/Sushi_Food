@page "/menu"
@using HidaSushi.Shared.Models
@using HidaSushi.Client.Services
@inject IJSRuntime JSRuntime
@inject ICartService CartService
@inject IToastService ToastService
@inject ILogger<Menu> Logger
@inject IApiService ApiService
@inject NavigationManager Navigation
@inject ILocalizationService LocalizationService
@inherits FlowbitePage

<PageTitle>@LocalizationService.GetString("Menu.Title")</PageTitle>

<!-- Modern Hero Section matching Home page style -->
<section class="relative min-h-[60vh] bg-gradient-to-br from-slate-50 via-white to-green-50 overflow-hidden">
    <!-- Floating Elements -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute top-20 left-10 w-20 h-20 bg-gradient-to-br from-green-400/20 to-blue-400/20 rounded-full blur-xl animate-float"></div>
        <div class="absolute top-40 right-20 w-32 h-32 bg-gradient-to-br from-purple-400/20 to-pink-400/20 rounded-full blur-xl animate-float-delayed"></div>
        <div class="absolute bottom-20 left-1/4 w-24 h-24 bg-gradient-to-br from-orange-400/20 to-red-400/20 rounded-full blur-xl animate-float-slow"></div>
    </div>
    
    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 pb-16">
        <div class="text-center animate-fade-in-up">
            <div class="mb-6">
                <span class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-green-100 to-blue-100 text-green-800 text-sm font-medium rounded-full border border-green-200 shadow-sm">
                    <span class="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></span>
                    @LocalizationService.GetString("Menu.HandcraftedByChef")
                </span>
            </div>
            
            <h1 class="text-5xl md:text-6xl lg:text-7xl font-bold text-gray-900 mb-6 leading-tight">
                @LocalizationService.GetString("Menu.OurMenu")
                <span class="bg-gradient-to-r from-green-600 via-blue-600 to-purple-600 bg-clip-text text-transparent">
                    @LocalizationService.GetString("Menu.Menu")
                </span>
            </h1>
            
            <p class="text-xl text-gray-600 mb-8 max-w-2xl mx-auto leading-relaxed">
                @LocalizationService.GetString("Menu.Description")
            </p>
        </div>
    </div>
</section>

<!-- Modern Filters Section -->
<section class="py-8 bg-white/80 backdrop-blur-lg sticky top-16 z-40 border-b border-gray-200/50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-center items-center space-x-4 flex-wrap gap-3">
            <button @onclick="SetFilterAll"
                    class="@(currentFilter == "all" ? "bg-gradient-to-r from-green-600 to-blue-600 text-white shadow-xl" : "bg-white/90 text-gray-700 border border-gray-300 hover:bg-gray-50") inline-flex items-center px-6 py-3 rounded-2xl font-semibold text-base transition-all duration-300 transform hover:scale-105 hover:shadow-lg">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                </svg>
                @LocalizationService.GetString("Menu.AllRolls")
            </button>
            <button @onclick="SetFilterSignature"
                    class="@(currentFilter == "signature" ? "bg-gradient-to-r from-green-600 to-blue-600 text-white shadow-xl" : "bg-white/90 text-gray-700 border border-gray-300 hover:bg-gray-50") inline-flex items-center px-6 py-3 rounded-2xl font-semibold text-base transition-all duration-300 transform hover:scale-105 hover:shadow-lg">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                </svg>
                @LocalizationService.GetString("Menu.Signature")
            </button>
            <button @onclick="SetFilterVeggie"
                    class="@(currentFilter == "veggie" ? "bg-gradient-to-r from-green-600 to-blue-600 text-white shadow-xl" : "bg-white/90 text-gray-700 border border-gray-300 hover:bg-gray-50") inline-flex items-center px-6 py-3 rounded-2xl font-semibold text-base transition-all duration-300 transform hover:scale-105 hover:shadow-lg">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"/>
                </svg>
                @LocalizationService.GetString("Menu.Vegetarian")
            </button>
            <button @onclick="@(() => Navigation.NavigateTo("/build-roll"))"
                    class="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white inline-flex items-center px-6 py-3 rounded-2xl font-semibold text-base transition-all duration-300 transform hover:scale-105 shadow-xl hover:shadow-2xl">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                </svg>
                @LocalizationService.GetString("Menu.BuildYourOwn")
            </button>
        </div>
    </div>
</section>

<!-- Menu Items Grid -->
<section class="py-16 bg-gradient-to-br from-slate-50 via-white to-blue-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        
        @if (isLoading)
        {
            <div class="flex justify-center items-center py-20">
                <div class="text-center">
                    <div class="animate-spin rounded-full h-16 w-16 border-b-4 border-green-600 mx-auto mb-4"></div>
                    <p class="text-gray-600 text-lg">@LocalizationService.GetString("Menu.LoadingRolls")</p>
                </div>
            </div>
        }
        else if (filteredRolls?.Any() == true)
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                @foreach (var roll in filteredRolls)
                {
                    <ProductCard Roll="roll" OnAddToCart="AddToCart" />
                }
            </div>
        }
        else
        {
            <div class="text-center py-20">
                <div class="text-6xl mb-4">üç±</div>
                <h3 class="text-2xl font-bold text-gray-900 mb-2">@LocalizationService.GetString("Menu.NoRollsFound")</h3>
                <p class="text-gray-600 mb-6">@LocalizationService.GetString("Menu.NoRollsFoundDescription")</p>
                <button @onclick="SetFilterAll" 
                        class="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-semibold py-3 px-6 rounded-2xl transition-all duration-300 transform hover:scale-105 shadow-lg">
                    @LocalizationService.GetString("Menu.ViewAllRolls")
                </button>
            </div>
        }
    </div>
</section>

<!-- Build Your Own Call-to-Action with pure Tailwind CSS -->
<section class="py-16 bg-gradient-to-br from-purple-600 via-pink-600 to-amber-500 text-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h2 class="text-3xl md:text-4xl font-bold mb-6 font-poppins">@LocalizationService.GetString("Menu.CustomRollTitle")</h2>
        <p class="text-xl mb-8 text-purple-100 max-w-2xl mx-auto">
            @LocalizationService.GetString("Menu.CustomRollDescription")
        </p>
        <a href="/build-roll" class="inline-flex items-center px-8 py-4 bg-white text-purple-600 hover:bg-gray-50 font-semibold rounded-xl shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"/>
            </svg>
            <span class="text-sm lg:text-base">@LocalizationService.GetString("Menu.BuildYourOwnRoll")</span>
        </a>
    </div>
</section>

@code {
    private List<SushiRoll> allRolls = new();
    private List<SushiRoll> filteredRolls = new();
    private string currentFilter = "all";
    private Dictionary<int, int> quantities = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadRolls();
        LocalizationService.OnLanguageChanged += OnLanguageChanged;
    }

    private void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        LocalizationService.OnLanguageChanged -= OnLanguageChanged;
    }

    private async Task LoadRolls()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Fetch menu from backend
            allRolls = await ApiService.GetMenuAsync();
            filteredRolls = allRolls;

            // Initialize quantities
            foreach (var roll in allRolls)
            {
                quantities[roll.Id] = 1;
            }

            Logger.LogInformation("Menu page initialized with {RollCount} rolls from backend", allRolls.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading menu from backend");
            allRolls = new List<SushiRoll>();
            filteredRolls = new List<SushiRoll>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SetFilterAll()
    {
        try
        {
            currentFilter = "all";
            isLoading = true;
            StateHasChanged();

            filteredRolls = await ApiService.GetMenuAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error filtering all rolls");
            filteredRolls = new List<SushiRoll>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SetFilterSignature()
    {
        try
        {
            currentFilter = "signature";
            isLoading = true;
            StateHasChanged();

            filteredRolls = await ApiService.GetSignatureRollsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error filtering signature rolls");
            filteredRolls = new List<SushiRoll>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SetFilterVeggie()
    {
        try
        {
            currentFilter = "veggie";
            isLoading = true;
            StateHasChanged();

            filteredRolls = await ApiService.GetVegetarianRollsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error filtering vegetarian rolls");
            filteredRolls = new List<SushiRoll>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetRollEmoji(SushiRoll roll)
    {
        return roll.Name switch
        {
            var name when name.Contains("Taylor Swift") => "üêâ",
            var name when name.Contains("Blackbird") => "üê¶",
            var name when name.Contains("Beautiful") => "üëë",
            var name when name.Contains("Joker") => "üÉè",
            var name when name.Contains("Garden") => "üå±",
            _ => "üç£"
        };
    }

    private string? GetRollImage(string rollName)
    {
        return rollName switch
        {
            var name when name.Contains("Taylor Swift") => "/images/dishes/signature-roll-1.jpg",
            var name when name.Contains("Blackbird") => "/images/dishes/signature-roll-2.jpg",
            var name when name.Contains("Beautiful") => "/images/dishes/signature-roll-3.jpg",
            var name when name.Contains("Joker") => "/images/dishes/signature-roll-4.jpg",
            var name when name.Contains("Garden") => "/images/dishes/garden-veggie-roll.jpg",
            _ => null
        };
    }

    private int GetQuantity(int rollId)
    {
        try
        {
            return quantities.TryGetValue(rollId, out var quantity) ? quantity : 1;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting quantity for roll {RollId}", rollId);
            return 1;
        }
    }

    private void IncrementQuantity(int rollId)
    {
        try
        {
            if (quantities.ContainsKey(rollId))
                quantities[rollId]++;
            else
                quantities[rollId] = 2;
                
            Logger.LogDebug("Incremented quantity for roll {RollId} to {Quantity}", rollId, quantities[rollId]);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error incrementing quantity for roll {RollId}", rollId);
        }
    }

    private void DecrementQuantity(int rollId)
    {
        try
        {
            if (quantities.ContainsKey(rollId) && quantities[rollId] > 1)
            {
                quantities[rollId]--;
                Logger.LogDebug("Decremented quantity for roll {RollId} to {Quantity}", rollId, quantities[rollId]);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error decrementing quantity for roll {RollId}", rollId);
        }
    }

    private void AddToCart(SushiRoll roll)
    {
        try
        {
            if (roll == null)
            {
                Logger.LogWarning("Attempted to add null roll to cart");
                return;
            }

            var quantity = GetQuantity(roll.Id);
            CartService.AddItem(roll, quantity);
            Logger.LogInformation("Successfully added {Quantity}x {RollName} to cart from menu page", quantity, roll.Name);
            
            ToastService.ShowSuccess(
                "Added to Cart! üõí", 
                $"{quantity}x {roll.Name} - ‚Ç¨{(roll.Price * quantity):F2}"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding roll {RollName} to cart from menu", roll?.Name ?? "Unknown");
            JSRuntime.InvokeVoidAsync("alert", "Sorry, there was an error adding the item to your cart. Please try again.");
        }
    }
} 