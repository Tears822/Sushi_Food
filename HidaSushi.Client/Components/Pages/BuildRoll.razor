@page "/build-roll"
@using HidaSushi.Shared.Models
@using HidaSushi.Client.Services
@inject NavigationManager Navigation
@inject ICartService CartService
@inject IToastService ToastService
@inject ILogger<BuildRoll> Logger
@inherits FlowbitePage

<PageTitle>Build Your Own Roll - HIDA SUSHI</PageTitle>

<!-- Hero Section with Image Background -->
<section class="relative text-white py-16 lg:py-24 overflow-hidden" style="background-image: url('/images/header/header-background.jpg'); background-size: cover; background-position: center; background-repeat: no-repeat;">
    <!-- Subtle gradient overlay for text readability without blocking image -->
    <div class="absolute inset-0 bg-gradient-to-b from-black/20 via-transparent to-black/30"></div>
    
    <!-- Animated particles/elements for depth -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute top-1/4 left-1/4 w-3 h-3 bg-white bg-opacity-20 rounded-full animate-ping"></div>
        <div class="absolute top-1/3 right-1/4 w-2 h-2 bg-amber-300 bg-opacity-30 rounded-full animate-pulse"></div>
        <div class="absolute bottom-1/4 left-1/3 w-4 h-4 bg-green-300 bg-opacity-20 rounded-full animate-bounce"></div>
    </div>
    
    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <div class="animate-fade-in-up">
            <div class="text-6xl lg:text-8xl mb-6 transform hover:scale-110 transition-transform duration-300 text-shadow-lg">
                üé®
            </div>
            <h1 class="text-4xl md:text-6xl lg:text-7xl font-bold mb-6 font-poppins text-shadow-lg">
                Build Your Own Roll
            </h1>
            <p class="text-xl md:text-2xl text-white mb-8 max-w-3xl mx-auto leading-relaxed text-shadow">
                Create Your Perfect Sushi Roll, Step by Step
            </p>
            <div class="bg-white/20 backdrop-blur-sm rounded-xl p-4 inline-block border border-white/30 shadow-xl">
                <p class="text-lg font-medium">Base Price: <span class="text-gray-200">‚Ç¨15</span> ‚Ä¢ <span class="text-amber-200 font-bold text-xl">Live Price: ‚Ç¨@currentPrice</span></p>
            </div>
        </div>
    </div>
</section>

<!-- Build Section with Tailwind CSS -->
<section class="py-16 bg-gradient-to-br from-gray-50 to-green-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            <!-- Ingredient Selection -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100">
                    
                    <!-- Step 1: Roll Type -->
                    <div class="mb-8">
                        <h2 class="text-2xl lg:text-3xl font-bold mb-6 flex items-center">
                            <div class="relative mr-4">
                                <div class="w-12 h-12 bg-gradient-to-br from-green-500 to-blue-500 rounded-2xl flex items-center justify-center shadow-lg transform hover:scale-110 transition-all duration-300">
                                    <span class="text-white font-bold text-lg">1</span>
                                </div>
                                <div class="absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full shadow-md"></div>
                            </div>
                            <div>
                                <span class="bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">Choose Your Roll Type</span>
                                <p class="text-sm text-gray-600 font-normal mt-1">Select the foundation of your masterpiece</p>
                            </div>
                        </h2>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            @foreach (var rollType in Enum.GetValues<RollType>())
                            {
                                <div @onclick="() => SelectRollType(rollType)" 
                                     class="relative group border-2 rounded-xl p-6 cursor-pointer transition-all duration-300 transform hover:scale-105 @(selectedRollType == rollType ? "border-green-500 bg-gradient-to-br from-green-50 to-blue-50 shadow-lg" : "border-gray-200 hover:border-green-300 hover:shadow-md")">
                                    
                                    <!-- Selection Indicator -->
                                    @if (selectedRollType == rollType)
                                    {
                                        <div class="absolute -top-2 -right-2 bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center shadow-lg animate-pulse">
                                            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                            </svg>
                                        </div>
                                    }
                                    
                                    <div class="text-center">
                                        <div class="text-4xl mb-3 group-hover:scale-110 transition-transform duration-300">@GetRollTypeEmoji(rollType)</div>
                                        <h3 class="font-bold text-lg mb-2 text-gray-900">@rollType.ToString().Replace("_", " ")</h3>
                                        <p class="text-sm text-gray-600">@GetRollTypeDescription(rollType)</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Step 2: Base -->
                    <div class="mb-8">
                        <h2 class="text-2xl lg:text-3xl font-bold mb-6 flex items-center">
                            <div class="relative mr-4">
                                <div class="w-12 h-12 bg-gradient-to-br from-green-500 to-blue-500 rounded-2xl flex items-center justify-center shadow-lg transform hover:scale-110 transition-all duration-300">
                                    <span class="text-white font-bold text-lg">2</span>
                                </div>
                                <div class="absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full shadow-md"></div>
                            </div>
                            <div>
                                <span class="bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">Select Your Base</span>
                                <p class="text-sm text-gray-600 font-normal mt-1">Choose the foundation rice or alternative</p>
                            </div>
                        </h2>
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                            @foreach (var ingredient in GetIngredientsByCategory(IngredientCategory.Base))
                            {
                                <div @onclick="() => ToggleIngredient(ingredient)" 
                                     class="relative group border-2 rounded-xl p-4 cursor-pointer transition-all duration-300 transform hover:scale-105 @(IsIngredientSelected(ingredient.Id) ? "border-green-500 bg-gradient-to-br from-green-50 to-blue-50 shadow-lg" : "border-gray-200 hover:border-green-300 hover:shadow-md")">
                                    
                                    <!-- Selection Tick -->
                                    @if (IsIngredientSelected(ingredient.Id))
                                    {
                                        <div class="absolute -top-2 -right-2 bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg animate-bounce">
                                            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                            </svg>
                                        </div>
                                    }
                                    
                                    <div class="text-center">
                                        <div class="text-3xl mb-2 group-hover:scale-110 transition-transform duration-300">üçö</div>
                                        <h4 class="font-semibold text-sm mb-1 text-gray-900">@ingredient.Name</h4>
                                        <p class="text-xs text-gray-600 mb-2">@ingredient.Description</p>
                                        @if (ingredient.AdditionalPrice > 0)
                                        {
                                            <p class="text-xs text-green-600 font-bold bg-green-100 px-2 py-1 rounded-full">+‚Ç¨@ingredient.AdditionalPrice</p>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Step 3: Proteins -->
                    <div class="mb-8">
                        <h2 class="text-2xl lg:text-3xl font-bold mb-4 flex items-center">
                            <div class="relative mr-4">
                                <div class="w-12 h-12 bg-gradient-to-br from-green-500 to-blue-500 rounded-2xl flex items-center justify-center shadow-lg transform hover:scale-110 transition-all duration-300">
                                    <span class="text-white font-bold text-lg">3</span>
                                </div>
                                <div class="absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full shadow-md"></div>
                            </div>
                            <div>
                                <span class="bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">Choose Your Proteins</span>
                                <p class="text-sm text-gray-600 font-normal mt-1">Add premium seafood and proteins</p>
                            </div>
                        </h2>
                        <div class="bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 border-2 border-blue-200 rounded-2xl p-4 mb-6 shadow-lg">
                            <div class="flex items-center mb-3">
                                <div class="w-8 h-8 bg-gradient-to-br from-blue-400 to-indigo-500 rounded-xl flex items-center justify-center shadow-md mr-3">
                                    <div class="text-lg">üí°</div>
                                </div>
                                <span class="font-bold text-blue-800 text-lg">Pro Tip:</span>
                            </div>
                            <p class="text-blue-700 font-medium">
                                Select up to 3 proteins for the perfect balance ‚Ä¢ 
                                <span class="font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">Selected: @GetSelectedProteins().Count/3</span>
                            </p>
                        </div>
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                            @foreach (var ingredient in GetIngredientsByCategory(IngredientCategory.Protein))
                            {
                                <div @onclick="() => ToggleIngredient(ingredient)" 
                                     class="relative group border-2 rounded-xl p-4 cursor-pointer transition-all duration-300 transform hover:scale-105 @(IsIngredientSelected(ingredient.Id) ? "border-green-500 bg-gradient-to-br from-green-50 to-blue-50 shadow-lg" : GetSelectedProteins().Count >= 3 && !IsIngredientSelected(ingredient.Id) ? "border-gray-200 opacity-50 cursor-not-allowed" : "border-gray-200 hover:border-green-300 hover:shadow-md")">
                                    
                                    <!-- Selection Tick -->
                                    @if (IsIngredientSelected(ingredient.Id))
                                    {
                                        <div class="absolute -top-2 -right-2 bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg animate-bounce">
                                            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                            </svg>
                                        </div>
                                    }
                                    
                                    <div class="text-center">
                                        <div class="text-3xl mb-2 group-hover:scale-110 transition-transform duration-300">@GetIngredientEmoji(ingredient.Name)</div>
                                        <h4 class="font-semibold text-sm mb-1 text-gray-900">@ingredient.Name</h4>
                                        <p class="text-xs text-gray-600 mb-2">@ingredient.Description</p>
                                        
                                        <div class="flex flex-col space-y-1">
                                            @if (ingredient.AdditionalPrice > 0)
                                            {
                                                <p class="text-xs text-green-600 font-bold bg-green-100 px-2 py-1 rounded-full">+‚Ç¨@ingredient.AdditionalPrice</p>
                                            }
                                            @if (ingredient.Allergens.Any())
                                            {
                                                <div class="flex flex-wrap gap-1 justify-center">
                                                    @foreach (var allergen in ingredient.Allergens.Take(2))
                                                    {
                                                        <span class="text-xs bg-red-100 text-red-600 px-1 py-0.5 rounded">@allergen</span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Step 4: Vegetables -->
                    <div class="mb-8">
                        <h2 class="text-2xl lg:text-3xl font-bold mb-6 bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent flex items-center">
                            <span class="bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3">4</span>
                            Add Fresh Vegetables
                        </h2>
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                            @foreach (var ingredient in GetIngredientsByCategory(IngredientCategory.Vegetable))
                            {
                                <div @onclick="() => ToggleIngredient(ingredient)" 
                                     class="relative group border-2 rounded-xl p-4 cursor-pointer transition-all duration-300 transform hover:scale-105 @(IsIngredientSelected(ingredient.Id) ? "border-green-500 bg-gradient-to-br from-green-50 to-blue-50 shadow-lg" : "border-gray-200 hover:border-green-300 hover:shadow-md")">
                                    
                                    <!-- Selection Tick -->
                                    @if (IsIngredientSelected(ingredient.Id))
                                    {
                                        <div class="absolute -top-2 -right-2 bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg animate-bounce">
                                            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                            </svg>
                                        </div>
                                    }
                                    
                                    <div class="text-center">
                                        <div class="text-3xl mb-2 group-hover:scale-110 transition-transform duration-300">@GetIngredientEmoji(ingredient.Name)</div>
                                        <h4 class="font-semibold text-sm mb-1 text-gray-900">@ingredient.Name</h4>
                                        <p class="text-xs text-gray-600">@ingredient.Description</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Step 5: Premium Extras -->
                    <div class="mb-8">
                        <h2 class="text-2xl lg:text-3xl font-bold mb-6 bg-gradient-to-r from-amber-600 to-orange-600 bg-clip-text text-transparent flex items-center">
                            <span class="bg-gradient-to-r from-amber-500 to-orange-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3">5</span>
                            Premium Extras
                        </h2>
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                            @foreach (var ingredient in GetIngredientsByCategory(IngredientCategory.Extra))
                            {
                                <div @onclick="() => ToggleIngredient(ingredient)" 
                                     class="relative group border-2 rounded-xl p-4 cursor-pointer transition-all duration-300 transform hover:scale-105 @(IsIngredientSelected(ingredient.Id) ? "border-amber-500 bg-gradient-to-br from-amber-50 to-orange-50 shadow-lg" : "border-amber-200 hover:border-amber-400 hover:shadow-md")">
                                    
                                    <!-- Selection Tick -->
                                    @if (IsIngredientSelected(ingredient.Id))
                                    {
                                        <div class="absolute -top-2 -right-2 bg-amber-500 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg animate-bounce">
                                            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                            </svg>
                                        </div>
                                    }
                                    
                                    <div class="text-center">
                                        <div class="text-3xl mb-2 group-hover:scale-110 transition-transform duration-300">@GetIngredientEmoji(ingredient.Name)</div>
                                        <h4 class="font-semibold text-sm mb-1 text-gray-900">@ingredient.Name</h4>
                                        <p class="text-xs text-gray-600 mb-2">@ingredient.Description</p>
                                        @if (ingredient.AdditionalPrice > 0)
                                        {
                                            <p class="text-xs text-amber-600 font-bold bg-amber-100 px-2 py-1 rounded-full">+‚Ç¨@ingredient.AdditionalPrice</p>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Step 6 & 7: Toppings & Sauces -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        <!-- Toppings -->
                        <div>
                            <h2 class="text-xl lg:text-2xl font-bold mb-6 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent flex items-center">
                                <span class="bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3">6</span>
                                Toppings
                            </h2>
                            <div class="space-y-3">
                                @foreach (var ingredient in GetIngredientsByCategory(IngredientCategory.Topping))
                                {
                                    <div @onclick="() => ToggleIngredient(ingredient)" 
                                         class="relative flex items-center p-4 border-2 rounded-xl cursor-pointer transition-all duration-300 hover:shadow-md @(IsIngredientSelected(ingredient.Id) ? "border-purple-500 bg-gradient-to-r from-purple-50 to-pink-50 shadow-lg" : "border-gray-200 hover:border-purple-300")">
                                        
                                        <!-- Selection Tick -->
                                        @if (IsIngredientSelected(ingredient.Id))
                                        {
                                            <div class="absolute -top-2 -right-2 bg-purple-500 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg animate-bounce">
                                                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                                </svg>
                                            </div>
                                        }
                                        
                                        <span class="text-2xl mr-4">@GetIngredientEmoji(ingredient.Name)</span>
                                        <div class="flex-1">
                                            <h4 class="font-semibold text-sm text-gray-900">@ingredient.Name</h4>
                                            <p class="text-xs text-gray-600">@ingredient.Description</p>
                                        </div>
                                        @if (ingredient.AdditionalPrice > 0)
                                        {
                                            <span class="text-sm text-purple-600 font-bold bg-purple-100 px-2 py-1 rounded-full">+‚Ç¨@ingredient.AdditionalPrice</span>
                                        }
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Sauces -->
                        <div>
                            <h2 class="text-xl lg:text-2xl font-bold mb-6 bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent flex items-center">
                                <span class="bg-gradient-to-r from-red-500 to-pink-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3">7</span>
                                Sauces
                            </h2>
                            <div class="space-y-3">
                                @foreach (var ingredient in GetIngredientsByCategory(IngredientCategory.Sauce))
                                {
                                    <div @onclick="() => ToggleIngredient(ingredient)" 
                                         class="relative flex items-center p-4 border-2 rounded-xl cursor-pointer transition-all duration-300 hover:shadow-md @(IsIngredientSelected(ingredient.Id) ? "border-red-500 bg-gradient-to-r from-red-50 to-pink-50 shadow-lg" : "border-gray-200 hover:border-red-300")">
                                        
                                        <!-- Selection Tick -->
                                        @if (IsIngredientSelected(ingredient.Id))
                                        {
                                            <div class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg animate-bounce">
                                                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                                </svg>
                                            </div>
                                        }
                                        
                                        <span class="text-2xl mr-4">@GetIngredientEmoji(ingredient.Name)</span>
                                        <div class="flex-1">
                                            <h4 class="font-semibold text-sm text-gray-900">@ingredient.Name</h4>
                                            <p class="text-xs text-gray-600">@ingredient.Description</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary - Sticky Sidebar -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-2xl shadow-xl p-6 sticky top-20 border border-gray-100">
                    <h3 class="text-xl lg:text-2xl font-bold mb-6 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">Your Custom Roll</h3>
                    
                    <!-- Roll Preview -->
                    <div class="bg-gradient-to-br from-purple-50 via-pink-50 to-amber-50 rounded-xl p-6 mb-6 text-center border border-purple-200">
                        <div class="text-5xl lg:text-6xl mb-3 animate-pulse">üç£</div>
                        <p class="font-bold text-lg text-purple-700">@selectedRollType.ToString().Replace("_", " ")</p>
                        <p class="text-sm text-purple-600 mt-1">@selectedIngredients.Count ingredient@(selectedIngredients.Count != 1 ? "s" : "") selected</p>
                    </div>

                    <!-- Selected Ingredients -->
                    <div class="space-y-4 mb-6 max-h-60 overflow-y-auto">
                        @if (selectedIngredients.Any())
                        {
                            @foreach (var category in Enum.GetValues<IngredientCategory>())
                            {
                                var categoryIngredients = selectedIngredients.Where(i => i.Category == category).ToList();
                                if (categoryIngredients.Any())
                                {
                                    <div class="bg-gray-50 rounded-lg p-3 border border-gray-200">
                                        <h4 class="font-bold text-sm text-gray-700 mb-2 flex items-center">
                                            <span class="bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs mr-2">@categoryIngredients.Count</span>
                                            @category:
                                        </h4>
                                        @foreach (var ingredient in categoryIngredients)
                                        {
                                            <div class="flex justify-between items-center text-sm py-1 border-b border-gray-200 last:border-b-0">
                                                <span class="text-gray-800">@ingredient.Name</span>
                                                @if (ingredient.AdditionalPrice > 0)
                                                {
                                                    <span class="text-green-600 font-semibold">+‚Ç¨@ingredient.AdditionalPrice</span>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            <div class="text-center text-gray-500 py-8">
                                <div class="text-4xl mb-3">ü§î</div>
                                <p class="text-sm">Start selecting ingredients to see your roll come together!</p>
                            </div>
                        }
                    </div>

                    <!-- Allergen Warnings -->
                    @if (GetAllAllergens().Any())
                    {
                        <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                            <h4 class="font-bold text-sm text-red-800 mb-2 flex items-center">
                                <span class="mr-2">‚ö†Ô∏è</span> Contains Allergens:
                            </h4>
                            <div class="flex flex-wrap gap-1">
                                @foreach (var allergen in GetAllAllergens())
                                {
                                    <span class="text-xs bg-red-100 text-red-700 px-2 py-1 rounded-full font-medium">@allergen</span>
                                }
                            </div>
                        </div>
                    }

                    <!-- Price Summary -->
                    <div class="border-t border-gray-200 pt-4 mb-6">
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm text-gray-600">Base Price:</span>
                            <span class="text-sm font-medium">‚Ç¨15</span>
                        </div>
                        @if (GetAdditionalCost() > 0)
                        {
                            <div class="flex justify-between items-center mb-2">
                                <span class="text-sm text-gray-600">Premium Ingredients:</span>
                                <span class="text-sm font-medium text-green-600">+‚Ç¨@GetAdditionalCost()</span>
                            </div>
                        }
                        <div class="flex justify-between items-center font-bold text-lg border-t border-gray-200 pt-2">
                            <span class="text-gray-900">Total:</span>
                            <span class="text-2xl bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">‚Ç¨@currentPrice</span>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="space-y-3">
                        <button @onclick="AddToCart" 
                                disabled="@(!selectedIngredients.Any())"
                                class="w-full py-4 px-6 rounded-xl font-bold text-white shadow-lg hover:shadow-xl transform transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none @(selectedIngredients.Any() ? "bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 hover:scale-105" : "bg-gray-400")">
                            <div class="flex items-center justify-center">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.8 9M7 13l1.8-9M7 13l5 5m0 0l5-5"/>
                                </svg>
                                Add to Cart - ‚Ç¨@currentPrice
                            </div>
                        </button>
                        
                        <button @onclick="ClearSelection" 
                                class="w-full py-3 px-6 rounded-xl font-semibold text-gray-700 border-2 border-gray-300 hover:border-gray-400 hover:bg-gray-50 transition-all duration-300">
                            üîÑ Start Over
                        </button>
                        
                        <a href="/menu" class="block w-full py-3 px-6 rounded-xl font-semibold text-center text-purple-600 border-2 border-purple-300 hover:border-purple-400 hover:bg-purple-50 transition-all duration-300">
                            ‚Üê Back to Menu
                        </a>
                    </div>

                    <!-- Chef's Tips with Modern 3D Design -->
                    <div class="mt-6 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 border-2 border-blue-200 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300">
                        <div class="flex items-center mb-4">
                            <!-- 3D Chef Icon -->
                            <div class="relative mr-4">
                                <div class="w-12 h-12 bg-gradient-to-br from-blue-400 to-indigo-500 rounded-2xl flex items-center justify-center shadow-lg transform hover:scale-110 transition-all duration-300">
                                    <div class="text-2xl">üë®‚Äçüç≥</div>
                                </div>
                                <div class="absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center shadow-md">
                                    <div class="text-xs">‚ú®</div>
                                </div>
                            </div>
                            <div>
                                <h4 class="font-bold text-lg text-blue-800 mb-1">Chef Jonathan's Pro Tips</h4>
                                <p class="text-sm text-blue-600">Master the art of sushi building</p>
                            </div>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                            <div class="flex items-center p-3 bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-200">
                                <div class="text-2xl mr-3 transform hover:scale-110 transition-transform duration-200">üë•</div>
                                <span class="text-sm font-medium text-gray-700">Each roll serves 2 people perfectly</span>
                            </div>
                            <div class="flex items-center p-3 bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-200">
                                <div class="text-2xl mr-3 transform hover:scale-110 transition-transform duration-200">üéØ</div>
                                <span class="text-sm font-medium text-gray-700">Mix textures for the best experience</span>
                            </div>
                            <div class="flex items-center p-3 bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-200">
                                <div class="text-2xl mr-3 transform hover:scale-110 transition-transform duration-200">üèÜ</div>
                                <span class="text-sm font-medium text-gray-700">3-4 ingredients usually create perfection</span>
                            </div>
                            <div class="flex items-center p-3 bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-200">
                                <div class="text-2xl mr-3 transform hover:scale-110 transition-transform duration-200">üå∂Ô∏è</div>
                                <span class="text-sm font-medium text-gray-700">Don't forget the sauce for extra flavor!</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private RollType selectedRollType = RollType.Normal;
    private List<Ingredient> selectedIngredients = new();
    private List<Ingredient> availableIngredients = DefaultIngredients.All;
    private decimal currentPrice = 15m; // Base price
    private const decimal BASE_PRICE = 15m;

    private void SelectRollType(RollType rollType)
    {
        try
        {
            selectedRollType = rollType;
            Logger.LogDebug("Selected roll type: {RollType}", rollType);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error selecting roll type {RollType}", rollType);
        }
    }

    private void ToggleIngredient(Ingredient ingredient)
    {
        try
        {
            if (ingredient == null)
            {
                Logger.LogWarning("Attempted to toggle null ingredient");
                return;
            }

            if (IsIngredientSelected(ingredient.Id))
            {
                selectedIngredients.RemoveAll(i => i.Id == ingredient.Id);
                Logger.LogDebug("Removed ingredient {IngredientName} from selection", ingredient.Name);
            }
            else
            {
                // Check protein limit
                if (ingredient.Category == IngredientCategory.Protein && GetSelectedProteins().Count >= 3)
                {
                    Logger.LogDebug("Protein limit reached, cannot add {IngredientName}", ingredient.Name);
                    return;
                }

                selectedIngredients.Add(ingredient);
                Logger.LogDebug("Added ingredient {IngredientName} to selection", ingredient.Name);
            }

            CalculatePrice();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling ingredient {IngredientName}", ingredient?.Name ?? "Unknown");
        }
    }

    private bool IsIngredientSelected(int ingredientId)
    {
        return selectedIngredients.Any(i => i.Id == ingredientId);
    }

    private List<Ingredient> GetIngredientsByCategory(IngredientCategory category)
    {
        return availableIngredients.Where(i => i.Category == category).ToList();
    }

    private List<Ingredient> GetSelectedProteins()
    {
        return selectedIngredients.Where(i => i.Category == IngredientCategory.Protein).ToList();
    }

    private void CalculatePrice()
    {
        try
        {
            currentPrice = BASE_PRICE + selectedIngredients.Sum(i => i.AdditionalPrice);
            Logger.LogDebug("Calculated price: ‚Ç¨{Price} with {IngredientCount} ingredients", currentPrice, selectedIngredients.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error calculating price");
            currentPrice = BASE_PRICE; // Fallback to base price
        }
    }

    private decimal GetAdditionalCost()
    {
        return selectedIngredients.Sum(i => i.AdditionalPrice);
    }

    private List<string> GetAllAllergens()
    {
        return selectedIngredients.SelectMany(i => i.Allergens).Distinct().ToList();
    }

    private void AddToCart()
    {
        try
        {
            if (!selectedIngredients.Any())
            {
                Logger.LogWarning("Attempted to add custom roll to cart with no ingredients selected");
                return;
            }

            var customRoll = new CustomRoll
            {
                Name = $"Custom {selectedRollType.ToString().Replace("_", " ")} Roll",
                RollType = selectedRollType,
                SelectedIngredientIds = selectedIngredients.Select(i => i.Id).ToList(),
                SelectedIngredients = selectedIngredients.ToList(),
                TotalPrice = currentPrice,
                Notes = ""
            };

            CartService.AddCustomRoll(customRoll);
            
            Logger.LogInformation("Successfully added custom roll {RollName} with {IngredientCount} ingredients to cart", 
                customRoll.Name, selectedIngredients.Count);

            ToastService.ShowSuccess(
                "Custom Roll Added! üé®", 
                $"{customRoll.Name} - ‚Ç¨{customRoll.TotalPrice:F2}"
            );

            Navigation.NavigateTo("/cart");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding custom roll to cart");
            // Could show an error message to user here
        }
    }

    private void ClearSelection()
    {
        try
        {
            var previousCount = selectedIngredients.Count;
            selectedIngredients.Clear();
            selectedRollType = RollType.Normal;
            CalculatePrice();
            Logger.LogInformation("Cleared selection of {PreviousCount} ingredients", previousCount);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing selection");
        }
    }

    private string GetRollTypeEmoji(RollType rollType) => rollType switch
    {
        RollType.Normal => "üç£",
        RollType.InsideOut => "üîÑ",
        RollType.CucumberWrap => "ü•í",
        _ => "üç£"
    };

    private string GetRollTypeDescription(RollType rollType) => rollType switch
    {
        RollType.Normal => "Traditional nori outside",
        RollType.InsideOut => "Rice on the outside",
        RollType.CucumberWrap => "Wrapped in cucumber",
        _ => ""
    };

    private string GetIngredientEmoji(string name) => name switch
    {
        var n when n.Contains("Tuna") => "üêü",
        var n when n.Contains("Salmon") => "üç£",
        var n when n.Contains("Shrimp") => "ü¶ê",
        var n when n.Contains("Crab") => "ü¶Ä",
        var n when n.Contains("Tofu") => "üü®",
        var n when n.Contains("Egg") => "ü•ö",
        var n when n.Contains("Avocado") => "ü•ë",
        var n when n.Contains("Cucumber") => "ü•í",
        var n when n.Contains("Carrot") => "ü•ï",
        var n when n.Contains("Lettuce") => "ü•¨",
        var n when n.Contains("Cheese") => "üßÄ",
        var n when n.Contains("Onions") => "üßÖ",
        var n when n.Contains("Mango") => "ü•≠",
        var n when n.Contains("Sesame") => "üå∞",
        var n when n.Contains("Ikura") => "üî¥",
        var n when n.Contains("Mayo") => "ü•Ñ",
        var n when n.Contains("Sauce") => "ü•´",
        var n when n.Contains("Wasabi") => "üü¢",
        _ => "üü°"
    };
} 