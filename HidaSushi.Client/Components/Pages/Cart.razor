@page "/cart"
@using HidaSushi.Shared.Models
@using HidaSushi.Client.Services
@inject ICartService CartService
@inject NavigationManager Navigation
@inject ILogger<Cart> Logger
@inherits FlowbitePage
@implements IDisposable

<PageTitle>Shopping Cart - HIDA SUSHI</PageTitle>

<!-- Hero Section -->
<section class="relative bg-gradient-to-br from-orange-600 via-red-600 to-pink-600 text-white py-16 lg:py-20 overflow-hidden">
    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h1 class="text-4xl md:text-6xl lg:text-7xl font-bold mb-6 font-poppins">
            üõí Your Cart
        </h1>
        <p class="text-xl md:text-2xl text-orange-100 mb-8 max-w-3xl mx-auto leading-relaxed">
            Review your sushi selection and proceed to checkout
        </p>
    </div>
    
    <!-- Floating Elements -->
    <div class="absolute top-20 left-10 text-5xl opacity-20 animate-bounce">üç±</div>
    <div class="absolute bottom-20 right-10 text-4xl opacity-20 animate-pulse">ü•¢</div>
</section>

<!-- Cart Content -->
<section class="py-16 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        @if (cartItems.Any())
        {
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <!-- Cart Items -->
                <div class="lg:col-span-2">
                    <div class="bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100">
                        <h2 class="text-2xl lg:text-3xl font-bold mb-6 bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent flex items-center">
                            <span class="bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3">@cartItems.Count</span>
                            Items in Cart
                        </h2>
                        
                        <div class="space-y-6">
                            @foreach (var item in cartItems)
                            {
                                <div class="border border-gray-200 rounded-xl p-6 hover:shadow-md transition-shadow duration-300">
                                    <div class="flex flex-col sm:flex-row sm:items-center gap-4">
                                        <!-- Item Image/Icon -->
                                        <div class="flex-shrink-0">
                                            @if (item.SushiRoll != null)
                                            {
                                                <div class="w-20 h-20 bg-gradient-to-br from-purple-100 to-pink-100 rounded-xl flex items-center justify-center">
                                                    <span class="text-3xl">üç£</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="w-20 h-20 bg-gradient-to-br from-green-100 to-blue-100 rounded-xl flex items-center justify-center">
                                                    <span class="text-3xl">üé®</span>
                                                </div>
                                            }
                                        </div>
                                        
                                        <!-- Item Details -->
                                        <div class="flex-grow">
                                            <h3 class="font-bold text-lg text-gray-900 mb-1">@item.Name</h3>
                                            @if (item.SushiRoll != null)
                                            {
                                                <p class="text-sm text-gray-600 mb-2">Signature Roll</p>
                                                @if (item.SushiRoll.Ingredients.Any())
                                                {
                                                    <div class="flex flex-wrap gap-1 mb-2">
                                                        @foreach (var ingredient in item.SushiRoll.Ingredients.Take(3))
                                                        {
                                                            <span class="inline-block bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full">@ingredient</span>
                                                        }
                                                        @if (item.SushiRoll.Ingredients.Count > 3)
                                                        {
                                                            <span class="inline-block bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded-full">+@(item.SushiRoll.Ingredients.Count - 3) more</span>
                                                        }
                                                    </div>
                                                }
                                            }
                                            else if (item.CustomRoll != null)
                                            {
                                                <p class="text-sm text-gray-600 mb-2">Custom @item.CustomRoll.RollType.ToString().Replace("_", " ") Roll</p>
                                                @if (item.CustomRoll.SelectedIngredients.Any())
                                                {
                                                    <div class="flex flex-wrap gap-1 mb-2">
                                                        @foreach (var ingredient in item.CustomRoll.SelectedIngredients.Take(4))
                                                        {
                                                            <span class="inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">@ingredient.Name</span>
                                                        }
                                                        @if (item.CustomRoll.SelectedIngredients.Count > 4)
                                                        {
                                                            <span class="inline-block bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded-full">+@(item.CustomRoll.SelectedIngredients.Count - 4) more</span>
                                                        }
                                                    </div>
                                                }
                                            }
                                            <p class="text-lg font-bold text-orange-600">‚Ç¨@item.UnitPrice.ToString("F2") each</p>
                                        </div>
                                        
                                        <!-- Quantity Controls -->
                                        <div class="flex items-center space-x-3">
                                            <div class="flex items-center bg-gray-100 rounded-lg p-2">
                                                <button @onclick="() => UpdateQuantity(item.Id, item.Quantity - 1)" 
                                                        class="w-8 h-8 bg-white border border-gray-300 rounded-lg flex items-center justify-center text-orange-600 hover:bg-orange-50 hover:border-orange-300 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                                                        disabled="@(item.Quantity <= 1)">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
                                                    </svg>
                                                </button>
                                                
                                                <div class="px-4 py-2 text-center font-bold text-lg text-orange-600 min-w-[60px]">
                                                    @item.Quantity
                                                </div>
                                                
                                                <button @onclick="() => UpdateQuantity(item.Id, item.Quantity + 1)" 
                                                        class="w-8 h-8 bg-white border border-gray-300 rounded-lg flex items-center justify-center text-orange-600 hover:bg-orange-50 hover:border-orange-300 transition-all duration-200">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                                    </svg>
                                                </button>
                                            </div>
                                            
                                            <!-- Remove Button -->
                                            <button @onclick="() => RemoveItem(item.Id)" 
                                                    class="p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg transition-all duration-200">
                                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                                </svg>
                                            </button>
                                        </div>
                                        
                                        <!-- Item Total -->
                                        <div class="text-right">
                                            <p class="text-2xl font-bold text-gray-900">‚Ç¨@item.TotalPrice.ToString("F2")</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <!-- Continue Shopping -->
                        <div class="mt-8 pt-6 border-t border-gray-200">
                            <a href="/menu" class="inline-flex items-center text-orange-600 hover:text-orange-800 font-semibold transition-colors duration-200">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                                </svg>
                                Continue Shopping
                            </a>
                        </div>
                    </div>
                </div>
                
                <!-- Order Summary -->
                <div class="lg:col-span-1">
                    <div class="bg-white rounded-2xl shadow-xl p-6 sticky top-20 border border-gray-100">
                        <h3 class="text-xl lg:text-2xl font-bold mb-6 bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent">Order Summary</h3>
                        
                        <!-- Summary Details -->
                        <div class="space-y-4 mb-6">
                            <div class="flex justify-between items-center">
                                <span class="text-gray-600">Items (@GetTotalItemCount())</span>
                                <span class="font-medium">‚Ç¨@GetSubtotal().ToString("F2")</span>
                            </div>
                            <div class="flex justify-between items-center">
                                <span class="text-gray-600">Delivery Fee</span>
                                <span class="font-medium">‚Ç¨3.50</span>
                            </div>
                            <div class="border-t border-gray-200 pt-4">
                                <div class="flex justify-between items-center">
                                    <span class="text-lg font-bold text-gray-900">Total</span>
                                    <span class="text-2xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent">‚Ç¨@GetTotal().ToString("F2")</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Checkout Button -->
                        <button @onclick="ProceedToCheckout" 
                                class="w-full py-4 px-6 rounded-xl font-bold text-white shadow-lg hover:shadow-xl transform transition-all duration-300 bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 hover:scale-105">
                            <div class="flex items-center justify-center">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"/>
                                </svg>
                                Proceed to Checkout
                            </div>
                        </button>
                        
                        <!-- Clear Cart -->
                        <button @onclick="ClearCart" 
                                class="w-full mt-3 py-3 px-6 rounded-xl font-semibold text-gray-700 border-2 border-gray-300 hover:border-gray-400 hover:bg-gray-50 transition-all duration-300">
                            üóëÔ∏è Clear Cart
                        </button>
                        
                        <!-- Security Notice -->
                        <div class="mt-6 bg-green-50 border border-green-200 rounded-lg p-4">
                            <div class="flex items-center">
                                <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"/>
                                </svg>
                                <span class="text-sm text-green-800 font-medium">Secure Checkout</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <!-- Empty Cart -->
            <div class="text-center py-16">
                <div class="bg-white rounded-2xl shadow-xl p-12 max-w-md mx-auto">
                    <div class="text-8xl mb-6">üõí</div>
                    <h2 class="text-3xl font-bold text-gray-900 mb-4">Your cart is empty</h2>
                    <p class="text-gray-600 mb-8">Looks like you haven't added any delicious sushi rolls yet!</p>
                    
                    <div class="space-y-4">
                        <a href="/menu" class="block w-full py-4 px-6 rounded-xl font-bold text-white shadow-lg hover:shadow-xl transform transition-all duration-300 bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 hover:scale-105">
                            <div class="flex items-center justify-center">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                                </svg>
                                Browse Our Menu
                            </div>
                        </a>
                        
                        <a href="/build-roll" class="block w-full py-3 px-6 rounded-xl font-semibold text-orange-600 border-2 border-orange-300 hover:border-orange-400 hover:bg-orange-50 transition-all duration-300">
                            üé® Build Your Own Roll
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</section>

@code {
    private List<CartItem> cartItems = new();

    protected override void OnInitialized()
    {
        try
        {
            cartItems = CartService.GetCartItems();
            CartService.OnCartChanged += RefreshCart;
            Logger.LogInformation("Cart page initialized with {ItemCount} items", cartItems.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing Cart page");
            cartItems = new List<CartItem>(); // Fallback to empty cart
        }
    }

    public void Dispose()
    {
        try
        {
            CartService.OnCartChanged -= RefreshCart;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error disposing Cart page");
        }
    }

    private void RefreshCart()
    {
        try
        {
            cartItems = CartService.GetCartItems();
            StateHasChanged();
            Logger.LogDebug("Cart refreshed with {ItemCount} items", cartItems.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing cart");
        }
    }

    private void UpdateQuantity(int cartItemId, int quantity)
    {
        try
        {
            CartService.UpdateQuantity(cartItemId, quantity);
            Logger.LogInformation("Updated quantity for cart item {CartItemId} to {Quantity}", cartItemId, quantity);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating quantity for cart item {CartItemId}", cartItemId);
        }
    }

    private void RemoveItem(int cartItemId)
    {
        try
        {
            CartService.RemoveItem(cartItemId);
            Logger.LogInformation("Removed cart item {CartItemId}", cartItemId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing cart item {CartItemId}", cartItemId);
        }
    }

    private void ClearCart()
    {
        try
        {
            var itemCount = cartItems.Count;
            CartService.ClearCart();
            Logger.LogInformation("Cleared cart with {ItemCount} items", itemCount);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing cart");
        }
    }

    private int GetTotalItemCount()
    {
        try
        {
            return CartService.GetTotalItemCount();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting total item count");
            return 0;
        }
    }

    private decimal GetSubtotal()
    {
        try
        {
            return CartService.GetTotalPrice();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting subtotal");
            return 0m;
        }
    }

    private decimal GetTotal()
    {
        try
        {
            return GetSubtotal() + 3.50m; // Add delivery fee
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error calculating total");
            return 3.50m; // Just delivery fee as fallback
        }
    }

    private void ProceedToCheckout()
    {
        try
        {
            if (!cartItems.Any())
            {
                Logger.LogWarning("Attempted to proceed to checkout with empty cart");
                return;
            }

            Navigation.NavigateTo("/checkout");
            Logger.LogInformation("Proceeding to checkout with {ItemCount} items", cartItems.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error proceeding to checkout");
        }
    }
} 