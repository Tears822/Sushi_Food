@page "/checkout"
@using HidaSushi.Shared.Models
@using HidaSushi.Client.Services
@inject ICartService CartService
@inject IApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@inject ILogger<Checkout> Logger
@inherits FlowbitePage

<PageTitle>Checkout - HIDA SUSHI</PageTitle>

<!-- Modern Hero Section -->
<section class="bg-gradient-to-br from-slate-50 to-green-50 py-16 lg:py-20">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
            <div class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-green-100 to-blue-100 text-green-800 text-sm font-medium rounded-full border border-green-200 shadow-sm mb-6">
                <span class="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></span>
                Secure Checkout
            </div>
            <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-gray-900 mb-6">
                Complete Your <span class="bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">Order</span>
            </h1>
            <p class="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
                Almost there! Your fresh sushi will be prepared and delivered in 25-35 minutes
            </p>
        </div>
    </div>
</section>

<!-- Checkout Content -->
<section class="py-16 bg-white min-h-screen">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        @if (cartItems.Any())
        {
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
                <!-- Checkout Form -->
                <div class="lg:col-span-2 space-y-8">
                    
                    <!-- Progress Steps -->
                    <div class="bg-white rounded-3xl shadow-card border border-gray-100 p-6">
                        <div class="flex items-center justify-between mb-6">
                            <div class="flex items-center space-x-4">
                                <div class="@(currentStep >= 1 ? "bg-green-500" : "bg-gray-300") w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm transition-colors">
                                    @(currentStep > 1 ? "‚úì" : "1")
                                </div>
                                <span class="@(currentStep >= 1 ? "text-green-600" : "text-gray-500") font-medium">Order Type</span>
                            </div>
                            <div class="flex-1 h-0.5 @(currentStep >= 2 ? "bg-green-500" : "bg-gray-300") mx-4 transition-colors"></div>
                            <div class="flex items-center space-x-4">
                                <div class="@(currentStep >= 2 ? "bg-green-500" : "bg-gray-300") w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm transition-colors">
                                    @(currentStep > 2 ? "‚úì" : "2")
                                </div>
                                <span class="@(currentStep >= 2 ? "text-green-600" : "text-gray-500") font-medium">Details</span>
                            </div>
                            <div class="flex-1 h-0.5 @(currentStep >= 3 ? "bg-green-500" : "bg-gray-300") mx-4 transition-colors"></div>
                            <div class="flex items-center space-x-4">
                                <div class="@(currentStep >= 3 ? "bg-green-500" : "bg-gray-300") w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm transition-colors">
                                    @(currentStep > 3 ? "‚úì" : "3")
                                </div>
                                <span class="@(currentStep >= 3 ? "text-green-600" : "text-gray-500") font-medium">Payment</span>
                            </div>
                        </div>
                    </div>
                        
                        <!-- Step 1: Order Type -->
                    @if (currentStep == 1)
                    {
                        <div class="bg-white rounded-3xl shadow-card border border-gray-100 p-8 animate-fade-in-up">
                            <h2 class="text-2xl lg:text-3xl font-bold text-gray-900 mb-6 flex items-center">
                                <span class="w-10 h-10 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-4">1</span>
                                How would you like to receive your order?
                            </h2>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div @onclick="() => SelectOrderType(OrderType.Delivery)" 
                                     class="group relative border-2 rounded-2xl p-8 cursor-pointer transition-all duration-300 transform hover:scale-105 @(orderType == OrderType.Delivery ? "border-green-500 bg-gradient-to-br from-green-50 to-blue-50 shadow-lg" : "border-gray-200 hover:border-green-300 hover:shadow-md bg-white")">
                                    
                                    @if (orderType == OrderType.Delivery)
                                    {
                                        <div class="absolute -top-3 -right-3 bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center shadow-lg animate-scale-in">
                                            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                            </svg>
                        </div>
                    }
                    
                                    <div class="text-center">
                                        <div class="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-green-500 to-blue-500 rounded-2xl flex items-center justify-center text-white text-2xl group-hover:scale-110 transition-transform">
                                            üöö
                                        </div>
                                        <h3 class="text-xl font-bold text-gray-900 mb-2">Delivery</h3>
                                        <p class="text-gray-600 text-sm mb-4">Delivered to your door in 25-35 minutes</p>
                                        <div class="text-lg font-bold text-gray-900">‚Ç¨3.50 delivery fee</div>
                    </div>
                </div>
                                
                                <div @onclick="() => SelectOrderType(OrderType.Pickup)" 
                                     class="group relative border-2 rounded-2xl p-8 cursor-pointer transition-all duration-300 transform hover:scale-105 @(orderType == OrderType.Pickup ? "border-green-500 bg-gradient-to-br from-green-50 to-blue-50 shadow-lg" : "border-gray-200 hover:border-green-300 hover:shadow-md bg-white")">
                                    
                                    @if (orderType == OrderType.Pickup)
                                    {
                                        <div class="absolute -top-3 -right-3 bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center shadow-lg animate-scale-in">
                                            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                            </svg>
                                        </div>
                                    }
                                    
                                                <div class="text-center">
                                        <div class="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center text-white text-2xl group-hover:scale-110 transition-transform">
                                            üè™
                                        </div>
                                        <h3 class="text-xl font-bold text-gray-900 mb-2">Pickup</h3>
                                        <p class="text-gray-600 text-sm mb-4">Ready for pickup in 15-20 minutes</p>
                                        <div class="text-lg font-bold text-green-600">Free</div>
                                    </div>
                                </div>
                                    </div>
                            
                            <div class="mt-8 flex justify-end">
                                <button @onclick="NextStep" disabled="@(orderType == null)" 
                                        class="@(orderType != null ? "bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white" : "bg-gray-300 text-gray-500 cursor-not-allowed") px-8 py-4 rounded-2xl font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg">
                                    Continue to Details
                                    <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                                    </svg>
                                </button>
                            </div>
                                </div>
                    }

                    <!-- Step 2: Customer Details -->
                    @if (currentStep == 2)
                    {
                        <div class="bg-white rounded-3xl shadow-card border border-gray-100 p-8 animate-fade-in-up">
                            <h2 class="text-2xl lg:text-3xl font-bold text-gray-900 mb-6 flex items-center">
                                <span class="w-10 h-10 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-4">2</span>
                                Your Information
                            </h2>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                                    <div>
                                    <label class="block text-sm font-semibold text-gray-700 mb-2">Full Name *</label>
                                    <input @bind="customerName" @oninput="ValidateForm" 
                                           class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                           placeholder="Enter your full name" />
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-semibold text-gray-700 mb-2">Email Address *</label>
                                    <input type="email" @bind="customerEmail" @oninput="ValidateForm" 
                                           class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                           placeholder="your@email.com" />
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-semibold text-gray-700 mb-2">Phone Number *</label>
                                    <input type="tel" @bind="customerPhone" @oninput="ValidateForm" 
                                           class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                           placeholder="+32 123 456 789" />
                                </div>
                                
                                @if (orderType == OrderType.Delivery)
                                {
                                    <div>
                                        <label class="block text-sm font-semibold text-gray-700 mb-2">Postal Code *</label>
                                        <input @bind="postalCode" @oninput="ValidateForm" 
                                               class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                               placeholder="1000" />
                                    </div>
                                }
                            </div>
                            
                            @if (orderType == OrderType.Delivery)
                            {
                                <div class="mb-6">
                                    <label class="block text-sm font-semibold text-gray-700 mb-2">Delivery Address *</label>
                                    <input @bind="deliveryAddress" @oninput="ValidateForm" 
                                           class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                           placeholder="123 Main Street, Brussels" />
                                </div>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                                    <div>
                                        <label class="block text-sm font-semibold text-gray-700 mb-2">City</label>
                                        <input @bind="city" 
                                               class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                               placeholder="Brussels" />
                                    </div>
                                    
                                                    <div>
                                        <label class="block text-sm font-semibold text-gray-700 mb-2">Country</label>
                                        <select @bind="country" 
                                                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors">
                                            <option value="Belgium">Belgium</option>
                                            <option value="Netherlands">Netherlands</option>
                                            <option value="France">France</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="mb-6">
                                    <label class="block text-sm font-semibold text-gray-700 mb-2">Delivery Instructions (Optional)</label>
                                    <textarea @bind="orderNotes" rows="3" 
                                              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                              placeholder="Building number, floor, buzzer code, etc."></textarea>
                                                    </div>
                            }
                            else
                            {
                                <div class="bg-blue-50 border border-blue-200 rounded-xl p-6 mb-6">
                                    <div class="flex items-start space-x-3">
                                        <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
                                            <span class="text-white text-sm">üìç</span>
                                        </div>
                                                    <div>
                                            <h4 class="font-semibold text-blue-900 mb-2">Pickup Location</h4>
                                            <p class="text-blue-800 text-sm leading-relaxed">
                                                HIDA SUSHI Kitchen<br />
                                                123 Sushi Street, 1000 Brussels<br />
                                                Open: 11:00 AM - 10:00 PM daily
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                            
                            <div class="flex justify-between">
                                <button @onclick="PreviousStep" 
                                        class="px-6 py-3 border border-gray-300 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-colors">
                                    ‚Üê Back
                                </button>
                                <button @onclick="NextStep" disabled="@(!IsStep2Valid())" 
                                        class="@(IsStep2Valid() ? "bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white" : "bg-gray-300 text-gray-500 cursor-not-allowed") px-8 py-3 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg">
                                    Continue to Payment ‚Üí
                                </button>
                                </div>
                            </div>
                        }

                    <!-- Step 3: Payment -->
                    @if (currentStep == 3)
                    {
                        <div class="bg-white rounded-3xl shadow-card border border-gray-100 p-8 animate-fade-in-up">
                            <h2 class="text-2xl lg:text-3xl font-bold text-gray-900 mb-6 flex items-center">
                                <span class="w-10 h-10 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-4">3</span>
                                Payment Method
                            </h2>
                            
                            <!-- Payment Method Selection -->
                            <div class="grid grid-cols-1 gap-4 mb-6">
                                <div @onclick="() => SelectPaymentMethod(PaymentMethod.Stripe)"
                                     class="group relative border-2 rounded-2xl p-6 cursor-pointer transition-all duration-300 @(paymentMethod == PaymentMethod.Stripe ? "border-green-500 bg-gradient-to-br from-green-50 to-blue-50" : "border-gray-200 hover:border-green-300 bg-white")">
                                    
                                    @if (paymentMethod == PaymentMethod.Stripe)
                                    {
                                        <div class="absolute -top-2 -right-2 bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs">
                                            ‚úì
                                        </div>
                                    }
                                    
                                    <div class="flex items-center space-x-4">
                                        <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center text-white">
                                            üí≥
                                        </div>
                                        <div>
                                            <h3 class="font-bold text-gray-900">Credit/Debit Card</h3>
                                            <p class="text-sm text-gray-600">Secure payment with Stripe</p>
                                        </div>
                                    </div>
                                </div>

                                <div @onclick="() => SelectPaymentMethod(PaymentMethod.PayPal)"
                                     class="group relative border-2 rounded-2xl p-6 cursor-pointer transition-all duration-300 @(paymentMethod == PaymentMethod.PayPal ? "border-green-500 bg-gradient-to-br from-green-50 to-blue-50" : "border-gray-200 hover:border-green-300 bg-white")">
                                    
                                    @if (paymentMethod == PaymentMethod.PayPal)
                                    {
                                        <div class="absolute -top-2 -right-2 bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs">
                                            ‚úì
                                        </div>
                                    }
                                    
                                    <div class="flex items-center space-x-4">
                                        <div class="w-12 h-12 bg-gradient-to-br from-blue-600 to-blue-800 rounded-xl flex items-center justify-center text-white">
                                            üÖøÔ∏è
                                        </div>
                                        <div>
                                            <h3 class="font-bold text-gray-900">PayPal</h3>
                                            <p class="text-sm text-gray-600">Pay with your PayPal account</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div @onclick="() => SelectPaymentMethod(PaymentMethod.CashOnDelivery)"
                                     class="group relative border-2 rounded-2xl p-6 cursor-pointer transition-all duration-300 @(paymentMethod == PaymentMethod.CashOnDelivery ? "border-green-500 bg-gradient-to-br from-green-50 to-blue-50" : "border-gray-200 hover:border-green-300 bg-white")">
                                    
                                    @if (paymentMethod == PaymentMethod.CashOnDelivery)
                                    {
                                        <div class="absolute -top-2 -right-2 bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs">
                                            ‚úì
                                        </div>
                                    }
                                    
                                    <div class="flex items-center space-x-4">
                                        <div class="w-12 h-12 bg-gradient-to-br from-green-500 to-blue-500 rounded-xl flex items-center justify-center text-white">
                                            üí∞
                                        </div>
                                        <div>
                                            <h3 class="font-bold text-gray-900">Cash @(orderType == OrderType.Delivery ? "on Delivery" : "on Pickup")</h3>
                                            <p class="text-sm text-gray-600">Pay when you receive your order</p>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                                
                            <!-- Stripe Payment Form -->
                            @if (paymentMethod == PaymentMethod.Stripe)
                            {
                                <div class="bg-gray-50 rounded-2xl p-6 mb-6">
                                    <h4 class="font-semibold text-gray-900 mb-4">Card Information</h4>
                                    
                                    <div class="grid grid-cols-1 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Card Number *</label>
                                            <input @bind="cardNumber" @oninput="FormatCardNumber" maxlength="19"
                                                   class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                                   placeholder="1234 5678 9012 3456" />
                                        </div>
                                        
                                        <div class="grid grid-cols-2 gap-4">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-2">Expiry Date *</label>
                                                <input @bind="expiryDate" @oninput="FormatExpiryDate" maxlength="5"
                                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                                       placeholder="MM/YY" />
                                            </div>
                                            
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-2">CVV *</label>
                                                <input @bind="cvv" @oninput="FormatCVV" maxlength="4" type="password"
                                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                                       placeholder="123" />
                                            </div>
                                        </div>
                                        
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Cardholder Name *</label>
                                            <input @bind="cardholderName" 
                                                   class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" 
                                                   placeholder="John Doe" />
                                        </div>
                                    </div>
                                    
                                    <!-- Security Notice -->
                                    <div class="mt-4 flex items-center space-x-2 text-sm text-gray-600">
                                        <svg class="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"/>
                                        </svg>
                                        <span>Your payment information is secure and encrypted</span>
                                    </div>
                                </div>
                            }

                            <!-- PayPal Payment Section -->
                            @if (paymentMethod == PaymentMethod.PayPal)
                            {
                                <div class="bg-gray-50 rounded-2xl p-6 mb-6">
                                    <h4 class="font-semibold text-gray-900 mb-4">PayPal Payment</h4>
                                    <p class="text-sm text-gray-600 mb-4">You will be redirected to PayPal to complete your payment securely.</p>
                                    
                                    @if (showPayPalButtons)
                                    {
                                        <PayPalButtons Amount="GetTotal()" 
                                                      OrderId="0" 
                                                      CustomerEmail="@customerEmail"
                                                      OnPaymentSuccess="HandlePayPalSuccess"
                                                      OnPaymentError="HandlePayPalError"
                                                      OnPaymentCancel="HandlePayPalCancel" />
                                    }
                                </div>
                            }
                            
                            <div class="flex justify-between">
                                <button @onclick="PreviousStep" 
                                        class="px-6 py-3 border border-gray-300 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-colors">
                                    ‚Üê Back
                                </button>
                                <button @onclick="PlaceOrder" disabled="@(!IsStep3Valid() || isProcessingOrder)" 
                                        class="@(IsStep3Valid() && !isProcessingOrder ? "bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white" : "bg-gray-300 text-gray-500 cursor-not-allowed") px-8 py-3 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg">
                                    @if (isProcessingOrder)
                                    {
                                        <span class="flex items-center">
                                            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                            Processing...
                                        </span>
                                    }
                                    else
                                    {
                                        <span>Place Order - ‚Ç¨@GetTotal().ToString("F2")</span>
                                    }
                                </button>
                            </div>
                        </div>
                    }
                    </div>

                    <!-- Order Summary -->
                    <div class="lg:col-span-1">
                    <div class="bg-white rounded-3xl shadow-card border border-gray-100 p-8 sticky top-8">
                        <h3 class="text-xl font-bold text-gray-900 mb-6">Order Summary</h3>
                        
                        <div class="space-y-4 mb-6">
                            @foreach (var item in cartItems)
                            {
                                <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-xl">
                                    <img src="@GetItemImageUrl(item)" alt="@GetItemName(item)" class="w-16 h-16 object-cover rounded-lg" />
                                    <div class="flex-1">
                                        <h4 class="font-semibold text-gray-900 text-sm">@GetItemName(item)</h4>
                                        <p class="text-sm text-gray-600">Qty: @item.Quantity</p>
                                    </div>
                                    <div class="text-right">
                                        <div class="font-bold text-gray-900">‚Ç¨@item.TotalPrice.ToString("F2")</div>
                                    </div>
                                </div>
                            }
                                    </div>
                        
                        <div class="border-t border-gray-200 pt-6 space-y-3">
                            <div class="flex justify-between text-gray-600">
                                <span>Subtotal</span>
                                <span>‚Ç¨@GetSubtotal().ToString("F2")</span>
                            </div>
                            
                            @if (orderType == OrderType.Delivery)
                            {
                                <div class="flex justify-between text-gray-600">
                                    <span>Delivery Fee</span>
                                    <span>‚Ç¨3.50</span>
                                    </div>
                                }
                            
                            <div class="flex justify-between text-gray-600">
                                <span>Tax (6%)</span>
                                <span>‚Ç¨@GetTax().ToString("F2")</span>
                            </div>
                            
                            <div class="border-t border-gray-200 pt-3">
                                <div class="flex justify-between items-center">
                                    <span class="text-xl font-bold text-gray-900">Total</span>
                                    <span class="text-2xl font-bold text-green-600">‚Ç¨@GetTotal().ToString("F2")</span>
                                </div>
                            </div>
                            </div>
                        
                        <!-- Estimated Time -->
                        <div class="mt-6 bg-green-50 border border-green-200 rounded-xl p-4">
                            <div class="flex items-center space-x-2">
                                <span class="text-green-500">‚è±Ô∏è</span>
                                <div>
                                    <div class="font-semibold text-green-800">
                                        @(orderType == OrderType.Delivery ? "Delivery Time" : "Pickup Time")
                                    </div>
                                    <div class="text-sm text-green-700">
                                        @(orderType == OrderType.Delivery ? "25-35 minutes" : "15-20 minutes")
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        else
        {
            <!-- Empty Cart -->
            <div class="text-center py-20">
                <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                    <span class="text-4xl">üõí</span>
                </div>
                <h3 class="text-2xl font-bold text-gray-900 mb-4">Your cart is empty</h3>
                <p class="text-gray-600 mb-8">Add some delicious sushi to your cart to continue</p>
                <button @onclick="@(() => Navigation.NavigateTo("/menu"))" 
                        class="inline-flex items-center px-8 py-4 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-semibold rounded-2xl transition-all duration-300 transform hover:scale-105 shadow-xl">
                    <span class="mr-2">üç£</span>
                    Browse Menu
                </button>
        </div>
        }
    </div>
</section>

@code {
    private List<CartItem> cartItems = new();
    private int currentStep = 1;
    private bool isProcessingOrder = false;
    
    // Order details
    private OrderType? orderType = null;
    private PaymentMethod paymentMethod = PaymentMethod.Stripe;
    
    // Customer information
    private string customerName = "";
    private string customerEmail = "";
    private string customerPhone = "";
    private string deliveryAddress = "";
    private string city = "Brussels";
    private string postalCode = "";
    private string country = "Belgium";
    private string orderNotes = "";
    
    // Payment information
    private string cardNumber = "";
    private string expiryDate = "";
    private string cvv = "";
    private string cardholderName = "";

    // PayPal related fields
    private bool showPayPalButtons = false;

    protected override void OnInitialized()
    {
        cartItems = CartService.GetCartItems();
        
        // Redirect to cart if empty
        if (!cartItems.Any())
        {
            Navigation.NavigateTo("/cart");
        }
        
        // Pre-fill cardholder name with customer name if available
        if (!string.IsNullOrEmpty(customerName))
        {
            cardholderName = customerName;
        }
    }

    private void SelectOrderType(OrderType? type)
    {
        orderType = type;
        StateHasChanged();
    }

    private void SelectPaymentMethod(PaymentMethod method)
    {
        paymentMethod = method;
        showPayPalButtons = method == PaymentMethod.PayPal;
        StateHasChanged();
    }

    private void NextStep()
    {
        if (currentStep < 3)
        {
            currentStep++;
            StateHasChanged();
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
            StateHasChanged();
        }
    }

    private void ValidateForm()
    {
        StateHasChanged();
    }

    private bool IsStep2Valid()
    {
        var hasBasicInfo = !string.IsNullOrWhiteSpace(customerName) &&
                          !string.IsNullOrWhiteSpace(customerEmail) &&
                          !string.IsNullOrWhiteSpace(customerPhone);

        if (orderType == OrderType.Delivery)
        {
            return hasBasicInfo &&
                   !string.IsNullOrWhiteSpace(deliveryAddress) &&
                   !string.IsNullOrWhiteSpace(postalCode);
        }

        return hasBasicInfo;
    }

    private bool IsStep3Valid()
    {
        if (string.IsNullOrWhiteSpace(customerName) || 
            string.IsNullOrWhiteSpace(customerEmail) || 
            string.IsNullOrWhiteSpace(customerPhone))
            return false;

        if (orderType == OrderType.Delivery && 
            (string.IsNullOrWhiteSpace(deliveryAddress) || 
             string.IsNullOrWhiteSpace(city) || 
             string.IsNullOrWhiteSpace(postalCode) || 
             string.IsNullOrWhiteSpace(country)))
            return false;

        if (paymentMethod == PaymentMethod.Stripe)
        {
            return !string.IsNullOrWhiteSpace(cardNumber) && 
                   !string.IsNullOrWhiteSpace(expiryDate) && 
                   !string.IsNullOrWhiteSpace(cvv) && 
                   !string.IsNullOrWhiteSpace(cardholderName);
        }

        return paymentMethod == PaymentMethod.CashOnDelivery || paymentMethod == PaymentMethod.PayPal;
    }

    private async Task PlaceOrder()
    {
        if (!IsStep3Valid() || isProcessingOrder) return;

        // PayPal payments are handled via the PayPal buttons component
        if (paymentMethod == PaymentMethod.PayPal)
        {
            ToastService.ShowInfo("Payment", "Please use the PayPal button above to complete your payment");
            return;
        }

        try
        {
            isProcessingOrder = true;
            StateHasChanged();

            // Create order object
            var order = new Order
            {
                CustomerName = customerName,
                CustomerEmail = customerEmail,
                CustomerPhone = customerPhone,
                Type = orderType ?? OrderType.Pickup, // Provide default value
                DeliveryAddress = orderType == OrderType.Delivery ? $"{deliveryAddress}, {city}, {postalCode}, {country}" : "",
                PaymentMethod = paymentMethod,
                SubtotalAmount = GetSubtotal(),
                DeliveryFee = orderType == OrderType.Delivery ? 3.50m : 0m,
                TaxAmount = GetTax(),
                TotalAmount = GetTotal(),
                Notes = orderNotes,
                Items = cartItems.Select(item => new OrderItem
                {
                    SushiRollId = item.SushiRoll?.Id,
                    CustomRollId = item.CustomRoll?.Id,
                    Quantity = item.Quantity,
                    UnitPrice = item.UnitPrice,
                    Price = item.TotalPrice,
                    SpecialInstructions = item.Name
                }).ToList()
            };

            // Process payment if Stripe
            if (paymentMethod == PaymentMethod.Stripe)
            {
                var paymentRequest = new PaymentRequest
                {
                    OrderId = 0, // Will be set after order creation
                    PaymentMethod = PaymentMethod.Stripe,
                    Amount = GetTotal(),
                    PaymentToken = $"{cardNumber}|{expiryDate}|{cvv}|{cardholderName}", // In production, use Stripe tokenization
                    CustomerEmail = customerEmail,
                    BillingAddress = orderType == OrderType.Delivery ? deliveryAddress : ""
                };
        
                // Create order first
                var createdOrder = await ApiService.CreateOrderAsync(order);
                if (createdOrder?.Id > 0)
                {
                    paymentRequest.OrderId = createdOrder.Id;
                    
                    // Process payment
                    var paymentResult = await ApiService.ProcessPaymentAsync(paymentRequest);
                    
                    if (paymentResult?.Success == true)
                    {
                        // Success
                        CartService.ClearCart();
                        ToastService.ShowSuccess("Success", "Order placed successfully!");
                        Navigation.NavigateTo($"/order-confirmation/{createdOrder.Id}");
                    }
                    else
                    {
                        ToastService.ShowError("Payment Error", paymentResult?.ErrorMessage ?? "Payment failed");
                    }
                }
                else
                {
                    ToastService.ShowError("Order Error", "Failed to create order");
                }
            }
            else if (paymentMethod == PaymentMethod.CashOnDelivery)
            {
                // For cash on delivery, just create the order
                var createdOrder = await ApiService.CreateOrderAsync(order);
                
                if (createdOrder?.Id > 0)
                {
                    // Process payment (just for recording)
                    var paymentRequest = new PaymentRequest
                    {
                        OrderId = createdOrder.Id,
                        PaymentMethod = PaymentMethod.CashOnDelivery,
                        Amount = GetTotal(),
                        CustomerEmail = customerEmail
                    };
                    
                    var paymentResult = await ApiService.ProcessPaymentAsync(paymentRequest);
                    
                    if (paymentResult?.Success == true)
                    {
                        CartService.ClearCart();
                        ToastService.ShowSuccess("Success", "Order placed successfully!");
                        Navigation.NavigateTo($"/order-confirmation/{createdOrder.Id}");
                    }
                    else
                    {
                        ToastService.ShowError("Payment Error", "Order created but payment recording failed");
                    }
                }
                else
                {
                    ToastService.ShowError("Order Error", "Failed to create order");
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error: {ex.Message}");
        }
        finally
        {
            isProcessingOrder = false;
            StateHasChanged();
        }
    }

    private Task CompleteOrder(Order createdOrder)
    {
        // Clear cart
        CartService.ClearCart();
        
        // Show success message
        ToastService.ShowSuccess("Success", "Order placed successfully!");
        
        // Redirect to order confirmation/tracking
        Navigation.NavigateTo($"/track-order?orderNumber={createdOrder.OrderNumber}");
        
        return Task.CompletedTask;
    }

    // Helper methods for formatting
    private void FormatCardNumber(ChangeEventArgs e)
    {
        var input = e.Value?.ToString()?.Replace(" ", "") ?? "";
        var formatted = "";
        
        for (int i = 0; i < input.Length && i < 16; i++)
        {
            if (i > 0 && i % 4 == 0)
                formatted += " ";
            formatted += input[i];
        }
        
        cardNumber = formatted;
    }

    private void FormatExpiryDate(ChangeEventArgs e)
    {
        var input = e.Value?.ToString()?.Replace("/", "") ?? "";
        if (input.Length >= 2)
        {
            expiryDate = input.Substring(0, 2) + "/" + input.Substring(2, Math.Min(2, input.Length - 2));
    }
        else
        {
            expiryDate = input;
        }
    }

    private void FormatCVV(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";
        cvv = input.Length <= 4 ? input : input.Substring(0, 4);
    }

    // Calculation methods
    private decimal GetSubtotal() => CartService.GetTotalPrice();
    private decimal GetDeliveryFee() => orderType == OrderType.Delivery ? 3.50m : 0m;
    private decimal GetTax() => (GetSubtotal() + GetDeliveryFee()) * 0.06m;
    private decimal GetTotal() => GetSubtotal() + GetDeliveryFee() + GetTax();

    // Helper methods
    private string GetItemName(CartItem item) => item.SushiRoll?.Name ?? item.CustomRoll?.Name ?? item.Name;
    private string GetItemImageUrl(CartItem item) => "/images/rolls/default-roll.jpg"; // Would map to actual images

    // PayPal event handlers
    private async Task HandlePayPalSuccess(PayPalCaptureResponse captureResult)
    {
        try
        {
            ToastService.ShowSuccess("Success", "PayPal payment completed successfully!");
            
            // Create order after successful payment
            await CompleteOrderAfterPayment("paypal_" + captureResult.Id);
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error completing order: {ex.Message}");
        }
    }

    private Task HandlePayPalError(string errorMessage)
    {
        ToastService.ShowError("PayPal Error", $"PayPal payment failed: {errorMessage}");
        return Task.CompletedTask;
    }

    private Task HandlePayPalCancel()
    {
        ToastService.ShowInfo("Payment", "PayPal payment was cancelled");
        return Task.CompletedTask;
    }

    private async Task CompleteOrderAfterPayment(string transactionId)
    {
        try
        {
            isProcessingOrder = true;
            StateHasChanged();

            // Create order object
            var order = new Order
            {
                CustomerName = customerName,
                CustomerEmail = customerEmail,
                CustomerPhone = customerPhone,
                Type = orderType ?? OrderType.Pickup,
                DeliveryAddress = orderType == OrderType.Delivery ? $"{deliveryAddress}, {city}, {postalCode}, {country}" : "",
                PaymentMethod = paymentMethod,
                SubtotalAmount = GetSubtotal(),
                DeliveryFee = orderType == OrderType.Delivery ? 3.50m : 0m,
                TaxAmount = GetTax(),
                TotalAmount = GetTotal(),
                Notes = orderNotes,
                Items = cartItems.Select(item => new OrderItem
                {
                    SushiRollId = item.SushiRoll?.Id,
                    CustomRollId = item.CustomRoll?.Id,
                    Quantity = item.Quantity,
                    UnitPrice = item.UnitPrice,
                    Price = item.TotalPrice,
                    SpecialInstructions = item.Name
                }).ToList()
            };

            // Create order
            var createdOrder = await ApiService.CreateOrderAsync(order);
            if (createdOrder?.Id > 0)
            {
                // Update payment status
                var paymentRequest = new PaymentRequest
                {
                    OrderId = createdOrder.Id,
                    PaymentMethod = paymentMethod,
                    Amount = GetTotal(),
                    PaymentToken = transactionId,
                    CustomerEmail = customerEmail
                };

                var paymentResult = await ApiService.ProcessPaymentAsync(paymentRequest);
                if (paymentResult?.Success == true)
                {
                    // Clear cart and redirect
                    CartService.ClearCart();
                    ToastService.ShowSuccess("Success", "Order placed successfully!");
                    Navigation.NavigateTo($"/order-confirmation/{createdOrder.Id}");
                }
                else
                {
                    ToastService.ShowError("Payment Error", "Payment processing failed");
                }
            }
            else
            {
                ToastService.ShowError("Order Error", "Failed to create order");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error: {ex.Message}");
        }
        finally
        {
            isProcessingOrder = false;
            StateHasChanged();
        }
    }
} 