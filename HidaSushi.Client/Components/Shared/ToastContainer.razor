@using HidaSushi.Client.Services
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@implements IDisposable

<!-- Enhanced Toast Container with Premium Design -->
<div class="fixed top-20 right-4 z-50 space-y-3 pointer-events-none max-w-sm">
    @foreach (var toast in activeToasts)
    {
        <div class="@(toast.IsVisible ? "transform translate-x-0 opacity-100 scale-100" : "transform translate-x-full opacity-0 scale-95") transition-all duration-700 ease-out pointer-events-auto">
            <div class="@GetToastClasses(toast.Type) p-5 rounded-2xl shadow-2xl border-l-4 backdrop-blur-xl relative overflow-hidden">
                
                <!-- Animated Background Gradient -->
                <div class="absolute inset-0 bg-gradient-to-r @GetBackgroundGradient(toast.Type) opacity-10"></div>
                
                <!-- Main Content -->
                <div class="relative z-10 flex items-start space-x-4">
                    <!-- Enhanced Icon with Animation -->
                    <div class="flex-shrink-0">
                        <div class="@GetIconBackground(toast.Type) w-12 h-12 rounded-full flex items-center justify-center text-xl transform hover:scale-110 transition-transform duration-300 shadow-lg">
                            @GetEnhancedIcon(toast.Type)
                        </div>
                    </div>
                    
                    <!-- Content -->
                    <div class="flex-1 min-w-0">
                        <div class="@GetTitleColor(toast.Type) font-bold text-lg mb-2 leading-tight">
                            @toast.Title
                        </div>
                        <div class="@GetMessageColor(toast.Type) text-sm leading-relaxed break-words">
                            @toast.Message
                        </div>
                        
                        <!-- Progress Bar -->
                        <div class="mt-3 w-full bg-white/20 rounded-full h-1 overflow-hidden">
                            <div class="@GetProgressColor(toast.Type) h-full rounded-full toast-progress" style="animation-duration: @(toast.Duration)ms;"></div>
                        </div>
                    </div>
                    
                    <!-- Close Button -->
                    <button @onclick="() => RemoveToast(toast.Id)" 
                            class="flex-shrink-0 p-2 rounded-full hover:bg-white/20 active:bg-white/30 transition-all duration-200 group">
                        <svg class="w-5 h-5 @GetMessageColor(toast.Type) group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
                
                <!-- Decorative Elements -->
                <div class="absolute top-0 right-0 w-20 h-20 @GetDecorativeColor(toast.Type) rounded-full opacity-10 transform translate-x-10 -translate-y-10"></div>
                <div class="absolute bottom-0 left-0 w-16 h-16 @GetDecorativeColor(toast.Type) rounded-full opacity-5 transform -translate-x-8 translate-y-8"></div>
            </div>
        </div>
    }
</div>

@code {
    private List<DisplayToastMessage> activeToasts = new();
    private Dictionary<string, System.Threading.Timer> toastTimers = new();

    protected override void OnInitialized()
    {
        ToastService.OnToastShow += ShowToast;
    }

    public void Dispose()
    {
        ToastService.OnToastShow -= ShowToast;
        
        // Dispose all timers
        foreach (var timer in toastTimers.Values)
        {
            timer?.Dispose();
        }
        toastTimers.Clear();
    }

    private async void ShowToast(Services.ToastMessage message)
    {
        try
        {
            await InvokeAsync(() =>
            {
                var displayToast = new DisplayToastMessage
                {
                    Id = message.Id,
                    Type = message.Type,
                    Title = message.Title,
                    Message = message.Message,
                    Icon = message.Icon,
                    Duration = message.Duration,
                    CreatedAt = message.CreatedAt,
                    IsVisible = false
                };

                activeToasts.Add(displayToast);
                StateHasChanged();

                // Show with delay for animation
                _ = Task.Delay(100).ContinueWith(async _ => 
                {
                    try
                    {
                        await InvokeAsync(() =>
                        {
                            displayToast.IsVisible = true;
                            StateHasChanged();
                        });
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error showing toast: {ex.Message}");
                    }
                });

                // Auto-remove timer
                var timer = new System.Threading.Timer(async _ => await RemoveToastAsync(message.Id), null, message.Duration, Timeout.Infinite);
                toastTimers[message.Id] = timer;
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ShowToast: {ex.Message}");
        }
    }

    private async Task RemoveToastAsync(string toastId)
    {
        try
        {
            await InvokeAsync(() => RemoveToast(toastId));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in RemoveToastAsync: {ex.Message}");
        }
    }

    private void RemoveToast(string toastId)
    {
        try
        {
            var toast = activeToasts.FirstOrDefault(t => t.Id == toastId);
            if (toast != null)
            {
                // Hide with animation
                toast.IsVisible = false;
                StateHasChanged();

                // Remove from list after animation
                _ = Task.Delay(700).ContinueWith(async _ => 
                {
                    try
                    {
                        await InvokeAsync(() =>
                        {
                            activeToasts.Remove(toast);
                            if (toastTimers.TryGetValue(toastId, out var timer))
                            {
                                timer.Dispose();
                                toastTimers.Remove(toastId);
                            }
                            StateHasChanged();
                        });
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error in delayed removal: {ex.Message}");
                    }
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in RemoveToast: {ex.Message}");
        }
    }

    private string GetToastClasses(ToastType toastType)
    {
        return toastType switch
        {
            ToastType.Success => "bg-gradient-to-br from-green-50 via-emerald-50 to-green-100 border-green-400 text-green-900 toast-success-glow",
            ToastType.Error => "bg-gradient-to-br from-red-50 via-rose-50 to-red-100 border-red-400 text-red-900",
            ToastType.Warning => "bg-gradient-to-br from-amber-50 via-yellow-50 to-orange-100 border-amber-400 text-amber-900",
            ToastType.Info => "bg-gradient-to-br from-blue-50 via-indigo-50 to-blue-100 border-blue-400 text-blue-900",
            _ => "bg-gradient-to-br from-gray-50 via-slate-50 to-gray-100 border-gray-400 text-gray-900"
        };
    }

    private string GetBackgroundGradient(ToastType toastType)
    {
        return toastType switch
        {
            ToastType.Success => "from-green-400 to-emerald-500",
            ToastType.Error => "from-red-400 to-rose-500",
            ToastType.Warning => "from-amber-400 to-orange-500",
            ToastType.Info => "from-blue-400 to-indigo-500",
            _ => "from-gray-400 to-slate-500"
        };
    }

    private string GetIconBackground(ToastType toastType)
    {
        return toastType switch
        {
            ToastType.Success => "bg-gradient-to-br from-green-500 to-emerald-600 text-white",
            ToastType.Error => "bg-gradient-to-br from-red-500 to-rose-600 text-white",
            ToastType.Warning => "bg-gradient-to-br from-amber-500 to-orange-600 text-white",
            ToastType.Info => "bg-gradient-to-br from-blue-500 to-indigo-600 text-white",
            _ => "bg-gradient-to-br from-gray-500 to-slate-600 text-white"
        };
    }

    private string GetTitleColor(ToastType toastType)
    {
        return toastType switch
        {
            ToastType.Success => "text-green-800",
            ToastType.Error => "text-red-800",
            ToastType.Warning => "text-amber-800",
            ToastType.Info => "text-blue-800",
            _ => "text-gray-800"
        };
    }

    private string GetMessageColor(ToastType toastType)
    {
        return toastType switch
        {
            ToastType.Success => "text-green-700",
            ToastType.Error => "text-red-700",
            ToastType.Warning => "text-amber-700",
            ToastType.Info => "text-blue-700",
            _ => "text-gray-700"
        };
    }

    private string GetProgressColor(ToastType toastType)
    {
        return toastType switch
        {
            ToastType.Success => "bg-gradient-to-r from-green-400 to-emerald-500",
            ToastType.Error => "bg-gradient-to-r from-red-400 to-rose-500",
            ToastType.Warning => "bg-gradient-to-r from-amber-400 to-orange-500",
            ToastType.Info => "bg-gradient-to-r from-blue-400 to-indigo-500",
            _ => "bg-gradient-to-r from-gray-400 to-slate-500"
        };
    }

    private string GetDecorativeColor(ToastType toastType)
    {
        return toastType switch
        {
            ToastType.Success => "bg-green-300",
            ToastType.Error => "bg-red-300",
            ToastType.Warning => "bg-amber-300",
            ToastType.Info => "bg-blue-300",
            _ => "bg-gray-300"
        };
    }

    private string GetEnhancedIcon(ToastType toastType)
    {
        return toastType switch
        {
            ToastType.Success => "🎉",
            ToastType.Error => "🚨",
            ToastType.Warning => "⚡",
            ToastType.Info => "💡",
            _ => "📝"
        };
    }

    public class DisplayToastMessage : Services.ToastMessage
    {
        public bool IsVisible { get; set; } = false;
    }
} 