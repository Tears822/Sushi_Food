@using HidaSushi.Client.Services
@inject ILocalizationService LocalizationService
@implements IDisposable

<div class="relative inline-block text-left">
    <div>
        <button type="button" 
                @onclick="ToggleDropdown"
                class="inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 @(_isChangingLanguage ? "opacity-50 cursor-not-allowed" : "")"
                id="language-menu-button" 
                aria-expanded="@_isOpen" 
                aria-haspopup="true"
                disabled="@_isChangingLanguage">
            @if (_isChangingLanguage)
            {
                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            }
            else
            {
                <span class="mr-2">@GetCurrentLanguageFlag()</span>
            }
            @GetCurrentLanguageName()
            <svg class="-mr-1 ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
        </button>
    </div>

    @if (_isOpen)
    {
        <div class="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-50" role="menu" aria-orientation="vertical" aria-labelledby="language-menu-button" tabindex="-1">
            <div class="py-1" role="none">
                @foreach (var language in LocalizationService.SupportedLanguages)
                {
                    <button @onclick="() => SelectLanguage(language.Code)"
                            class="@GetLanguageItemClass(language.Code) group flex items-center px-4 py-2 text-sm w-full text-left"
                            role="menuitem">
                        <span class="mr-3">@language.Flag</span>
                        @language.Name
                        @if (language.Code == LocalizationService.CurrentLanguage)
                        {
                            <svg class="ml-auto h-5 w-5 text-green-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                            </svg>
                        }
                    </button>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool _isOpen = false;
    private bool _isChangingLanguage = false;

    protected override void OnInitialized()
    {
        LocalizationService.OnLanguageChanged += OnLanguageChanged;
    }

    private void ToggleDropdown()
    {
        _isOpen = !_isOpen;
    }

    private async Task SelectLanguage(string languageCode)
    {
        if (_isChangingLanguage) return; // Prevent multiple calls
        
        _isChangingLanguage = true;
        _isOpen = false;
        StateHasChanged(); // Update UI to close dropdown
        
        try
        {
            await LocalizationService.SetLanguage(languageCode);
            // Force a re-render after language change
            await InvokeAsync(StateHasChanged);
        }
        finally
        {
            _isChangingLanguage = false;
        }
    }

    private void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetCurrentLanguageFlag()
    {
        return LocalizationService.SupportedLanguages
            .FirstOrDefault(l => l.Code == LocalizationService.CurrentLanguage)?.Flag ?? "🌍";
    }

    private string GetCurrentLanguageName()
    {
        return LocalizationService.SupportedLanguages
            .FirstOrDefault(l => l.Code == LocalizationService.CurrentLanguage)?.Name ?? "Language";
    }

    private string GetLanguageItemClass(string languageCode)
    {
        var baseClass = "hover:bg-gray-100 hover:text-gray-900";
        return languageCode == LocalizationService.CurrentLanguage
            ? $"{baseClass} bg-gray-100 text-gray-900"
            : $"{baseClass} text-gray-700";
    }

    public void Dispose()
    {
        LocalizationService.OnLanguageChanged -= OnLanguageChanged;
    }
} 