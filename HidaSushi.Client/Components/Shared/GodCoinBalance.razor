@using HidaSushi.Client.Services
@inject IGodCoinService GodCoinService
@inject ILocalizationService LocalizationService
@implements IDisposable

<div class="bg-gradient-to-r from-yellow-400 to-orange-500 rounded-lg shadow-lg p-4 text-white">
    <div class="flex items-center justify-between">
        <div class="flex items-center space-x-2">
            <div class="text-2xl">ðŸª™</div>
            <div>
                <h3 class="text-sm font-medium text-yellow-100">@LocalizationService.GetString("GodCoin.Balance")</h3>
                <div class="text-xl font-bold">
                    @if (_isLoading)
                    {
                        <span class="animate-pulse">...</span>
                    }
                    else if (_balance != null)
                    {
                        <span>@_balance.AvailableBalance.ToString("N0") GDC</span>
                    }
                    else
                    {
                        <span>-- GDC</span>
                    }
                </div>
            </div>
        </div>
        
        @if (_balance != null && _exchangeRate > 0)
        {
            <div class="text-right">
                <div class="text-xs text-yellow-100">â‰ˆ @LocalizationService.GetCurrencyDisplay(GodCoinService.ConvertFromGodCoin(_balance.AvailableBalance, _exchangeRate), "EUR")</div>
                <div class="text-xs text-yellow-200">@LocalizationService.GetString("GodCoin.ExchangeRate"): 1â‚¬ = @_exchangeRate.ToString("N0") GDC</div>
            </div>
        }
    </div>
    
    @if (_balance?.LockedBalance > 0)
    {
        <div class="mt-2 text-xs text-yellow-100">
            Locked: @_balance.LockedBalance.ToString("N0") GDC
        </div>
    }
</div>

@code {
    [Parameter] public string? UserId { get; set; }
    
    private Services.GodCoinBalance? _balance;
    private decimal _exchangeRate = 1000m;
    private bool _isLoading = false;
    private Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.OnLanguageChanged += OnLanguageChanged;
        
        if (!string.IsNullOrEmpty(UserId))
        {
            await LoadBalanceAsync();
            await LoadExchangeRateAsync();
            
            // Set up auto-refresh every 30 seconds
            _refreshTimer = new Timer(async _ => await RefreshData(), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
        }
    }

    private async Task LoadBalanceAsync()
    {
        if (string.IsNullOrEmpty(UserId)) return;
        
        _isLoading = true;
        StateHasChanged();
        
        try
        {
            _balance = await GodCoinService.GetBalanceAsync(UserId);
        }
        catch (Exception ex)
        {
            // Log error and show fallback
            Console.WriteLine($"Error loading GodCoin balance: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadExchangeRateAsync()
    {
        try
        {
            _exchangeRate = await GodCoinService.GetExchangeRateAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading exchange rate: {ex.Message}");
            _exchangeRate = 1000m; // Fallback rate
        }
    }

    private async Task RefreshData()
    {
        await LoadBalanceAsync();
        await LoadExchangeRateAsync();
    }

    private void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        LocalizationService.OnLanguageChanged -= OnLanguageChanged;
        _refreshTimer?.Dispose();
    }
} 