@using HidaSushi.Shared.Models
@using HidaSushi.Client.Services
@inject ILocalizationService LocalizationService
@inject NavigationManager Navigation

<div class="group bg-white/80 backdrop-blur-lg rounded-3xl shadow-lg hover:shadow-2xl transition-all duration-500 overflow-hidden border border-gray-200/50 hover:border-green-300/50 transform hover:-translate-y-2 cursor-pointer"
     @onclick="NavigateToDetail">
    <!-- Image Container -->
    <div class="relative h-48 bg-gradient-to-br from-green-50 to-blue-50 overflow-hidden">
        <div class="absolute inset-0 bg-gradient-to-br from-green-400/10 to-blue-400/10"></div>
        
        @if (!string.IsNullOrEmpty(Roll.ImageUrl))
        {
            <!-- Real Image -->
            <img src="@GetImageUrl(Roll.ImageUrl)" 
                 alt="@Roll.Name" 
                 class="absolute inset-0 w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
            
            <!-- Fallback when image fails to load -->
            <div class="absolute inset-0 flex items-center justify-center" style="display: none;">
                <div class="text-center">
                    <span class="text-6xl opacity-80 group-hover:scale-110 transition-transform duration-300">üç£</span>
                    <div class="mt-2 text-sm text-gray-500 font-medium">@LocalizationService.GetString("ProductCard.PremiumSushi")</div>
                </div>
            </div>
        }
        else
        {
            <!-- Placeholder when no image is available -->
            <div class="absolute inset-0 flex items-center justify-center">
                <div class="text-center">
                    <span class="text-6xl opacity-80 group-hover:scale-110 transition-transform duration-300">üç£</span>
                    <div class="mt-2 text-sm text-gray-500 font-medium">@LocalizationService.GetString("ProductCard.PremiumSushi")</div>
                </div>
            </div>
        }
        
        <!-- Signature Badge - Top Left -->
        @if (Roll.IsSignatureRoll)
        {
            <div class="absolute top-3 left-3 z-10">
                <span class="inline-flex items-center px-3 py-1 bg-gradient-to-r from-yellow-400 to-orange-400 text-white text-xs font-bold rounded-full shadow-lg">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                    </svg>
                    @LocalizationService.GetString("ProductCard.Signature")
                </span>
            </div>
        }
        
        <!-- Vegetarian Badge - Top Right -->
        @if (Roll.IsVegetarian)
        {
            <div class="absolute top-3 right-3 z-10">
                <span class="inline-flex items-center px-3 py-1 bg-gradient-to-r from-green-400 to-emerald-400 text-white text-xs font-bold rounded-full shadow-lg">
                    üå± @LocalizationService.GetString("ProductCard.Veggie")
                </span>
            </div>
        }
        
        <!-- Price Badge - Bottom Right (if no other badges) -->
        @if (!Roll.IsSignatureRoll && !Roll.IsVegetarian)
        {
            <div class="absolute bottom-3 right-3 z-10">
                <span class="inline-flex items-center px-3 py-1 bg-gradient-to-r from-green-600 to-blue-600 text-white text-sm font-bold rounded-full shadow-lg">
                    ‚Ç¨@Roll.Price.ToString("F2")
                </span>
            </div>
        }
    </div>
    
    <!-- Content -->
    <div class="p-6">
        <!-- Title and Price Row -->
        <div class="flex justify-between items-start mb-3">
            <h3 class="text-xl font-bold text-gray-900 group-hover:text-green-600 transition-colors duration-300 flex-1 mr-3">@Roll.Name</h3>
            @if (Roll.IsSignatureRoll || Roll.IsVegetarian)
            {
                <span class="text-2xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent flex-shrink-0">‚Ç¨@Roll.Price.ToString("F2")</span>
            }
        </div>
        
        <!-- Description -->
        <p class="text-gray-600 mb-4 leading-relaxed min-h-[3rem]">@Roll.Description</p>
        
        <!-- Ingredients Section -->
        @if (Roll.Ingredients?.Any() == true)
        {
            <div class="mb-4">
                <div class="flex flex-wrap gap-2">
                    @foreach (var ingredient in Roll.Ingredients.Take(3))
                    {
                        <span class="inline-block px-3 py-1 bg-gray-100 text-gray-700 text-xs rounded-full">@ingredient</span>
                    }
                    @if (Roll.Ingredients.Count > 3)
                    {
                        <span class="inline-block px-3 py-1 bg-gray-100 text-gray-700 text-xs rounded-full">@LocalizationService.GetString("ProductCard.MoreIngredients", Roll.Ingredients.Count - 3)</span>
                    }
                </div>
            </div>
        }
        
        <!-- Action Buttons -->
        <div class="flex space-x-2">
            <!-- View Details Button -->
            <button @onclick="NavigateToDetail" @onclick:stopPropagation="true"
                    class="flex-1 bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white font-semibold py-2 px-4 rounded-xl transition-all duration-300 text-sm">
                <span class="flex items-center justify-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                    View Details
                </span>
            </button>
            
            <!-- Add to Cart Button -->
            <button @onclick="AddToCartClick" @onclick:stopPropagation="true"
                    class="flex-1 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-semibold py-2 px-4 rounded-xl transition-all duration-300 text-sm">
                <span class="flex items-center justify-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l-2.5-5M7 13h10m0 0v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6z"/>
                    </svg>
                    Add to Cart
                </span>
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public SushiRoll Roll { get; set; } = new();
    [Parameter] public EventCallback<SushiRoll> OnAddToCart { get; set; }

    private void NavigateToDetail()
    {
        Navigation.NavigateTo($"/dish/{Roll.Id}");
    }

    private async Task AddToCartClick()
    {
        await OnAddToCart.InvokeAsync(Roll);
    }
    
    private string GetImageUrl(string? imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl))
            return "/images/placeholder.jpg";
            
        // If it's already a full URL, return as is
        if (imageUrl.StartsWith("http"))
            return imageUrl;
            
        // Remove leading slash if present to avoid double slashes
        var cleanPath = imageUrl.TrimStart('/');
        
        // Construct full URL to the API server
        return $"https://apimailbroker.ddns.net/{cleanPath}";
    }
} 